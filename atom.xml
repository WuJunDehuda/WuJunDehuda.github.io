<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WuJean的随想录</title>
  
  
  <link href="http://wujundehuda.github.io/atom.xml" rel="self"/>
  
  <link href="http://wujundehuda.github.io/"/>
  <updated>2022-09-20T12:30:02.551Z</updated>
  <id>http://wujundehuda.github.io/</id>
  
  <author>
    <name>WuJean</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PySide6配置及使用</title>
    <link href="http://wujundehuda.github.io/2022/09/20/PySide6%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://wujundehuda.github.io/2022/09/20/PySide6%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2022-09-20T12:28:48.000Z</published>
    <updated>2022-09-20T12:30:02.551Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了使用PySide6开发一款全景图拼接app的图形界面</p><p>包含PySide6的安装以及Qt Designer的使用及信号与槽函数的链接</p><h2 id="一、PySide6的安装"><a href="#一、PySide6的安装" class="headerlink" title="一、PySide6的安装"></a>一、PySide6的安装</h2><h2 id="1-1-使用conda创建python虚拟环境"><a href="#1-1-使用conda创建python虚拟环境" class="headerlink" title="1.1 使用conda创建python虚拟环境"></a>1.1 使用conda创建python虚拟环境</h2><p>我们使用conda创建虚拟环境，便于安装相应版本的包和打包应用</p><h4 id="1-1-1-安装conda"><a href="#1-1-1-安装conda" class="headerlink" title="1.1.1 安装conda"></a>1.1.1 安装conda</h4><p>conda 分为 anaconda 和 miniconda，anaconda 是一个包含了许多常用库的集合版本，miniconda 是精简版本（只包含conda、pip、zlib、python 以及它们所需的包），剩余的通过 conda install command 命令自行安装即可；</p><ul><li>miniconda 官网：<a href="https://conda.io/miniconda.html">https://conda.io/miniconda.html</a></li><li>anaconda 官网：<a href="https://www.anaconda.com/download">https://www.anaconda.com/download</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 检查conda，返回版本号则安装成功</span><br><span class="line">conda --version</span><br></pre></td></tr></table></figure><h4 id="1-1-2-创建-删除-环境"><a href="#1-1-2-创建-删除-环境" class="headerlink" title="1.1.2 创建/删除 环境"></a>1.1.2 创建/删除 环境</h4><p>命令创建python版本为X.X、名字为 env_name 的虚拟环境。env_name文件可以在Anaconda安装目录 envs文件下找到；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n env_name python=<span class="number">3.8</span></span><br></pre></td></tr></table></figure><p>在conda环境下，输入以下命令查看当前存在的环境：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><p>删除环境：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n env_name --all</span><br><span class="line">conda env remove -n env_name</span><br></pre></td></tr></table></figure><p>重命名环境（将 —clone 后面的环境重命名成 -n 后面的名字）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n python3 --clone py3  # 将 py3 重命名为 python3</span><br></pre></td></tr></table></figure><p>创建完成环境之后，系统会提示如何 进入和退出环境，如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate env_name  # 进入环境</span><br><span class="line">conda deactivate# 退出环境</span><br></pre></td></tr></table></figure><h3 id="1-2-安装PySide6并配置PyCharm-Vscode"><a href="#1-2-安装PySide6并配置PyCharm-Vscode" class="headerlink" title="1.2 安装PySide6并配置PyCharm/Vscode"></a>1.2 安装PySide6并配置PyCharm/Vscode</h3><h4 id="1-2-1-安装PySide6"><a href="#1-2-1-安装PySide6" class="headerlink" title="1.2.1 安装PySide6"></a>1.2.1 安装PySide6</h4><ul><li>PySide6是来自于Qt for Python项目的官方Python模块，它提供了对完整Qt 6.0+框架的访问。</li><li>Qt Designer 拖拽式的界面设计工具：通过拖拽的方式放置控件，并实时查看控件效果进行快速UI设计</li><li>PyUIC：主要是把Qt Designer生成的.ui文件换成.py文件</li><li>PyRCC主要是把编写的.qrc资源文件换成.py文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PySide6</span><br></pre></td></tr></table></figure><p>为了更加便捷处理图形化界面，我们配置编译器环境</p><h4 id="1-2-2-配置PyCharm"><a href="#1-2-2-配置PyCharm" class="headerlink" title="1.2.2 配置PyCharm"></a>1.2.2 配置PyCharm</h4><h4 id="1-2-3-配置Vscode"><a href="#1-2-3-配置Vscode" class="headerlink" title="1.2.3 配置Vscode"></a>1.2.3 配置Vscode</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文记录了使用PySide6开发一款全景图拼接app的图形界面&lt;/p&gt;
&lt;p&gt;包含PySide6的安装以及Qt Designer的使用及信号与槽函数的链接&lt;/p&gt;
&lt;h2 id=&quot;一、PySide6的安装&quot;&gt;&lt;a href=&quot;#一、PySide6的安装&quot; class=&quot;he</summary>
      
    
    
    
    <category term="项目开发" scheme="http://wujundehuda.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Qt" scheme="http://wujundehuda.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>核心框架汇总</title>
    <link href="http://wujundehuda.github.io/2022/09/20/%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6%E6%B1%87%E6%80%BB/"/>
    <id>http://wujundehuda.github.io/2022/09/20/%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6%E6%B1%87%E6%80%BB/</id>
    <published>2022-09-20T12:23:17.000Z</published>
    <updated>2022-09-20T12:24:41.261Z</updated>
    
    <content type="html"><![CDATA[<p><strong>数据结构的存储方式只有两种：数组（顺序存储）和链表（链式存储）</strong></p><ul><li>数组：可以随机访问，节省空间；但扩容困难</li><li>链表：可插入或删除元素；但不能随机访问</li></ul><p><strong>数据结构的基本操作：增删改查</strong></p><ul><li>数据结构存在的意义在于在不同的场景尽可能高效完成增删改查</li></ul><h3 id="刷题顺序："><a href="#刷题顺序：" class="headerlink" title="刷题顺序："></a>刷题顺序：</h3><ol><li><strong>先学习像数组、链表这种基本数据结构的常用算法</strong>，比如单链表翻转，前缀和数组，二分搜索等。</li><li><p>学会基础算法后先刷<strong>二叉树</strong></p></li><li><ol><li>二叉树容易培养思维框架</li><li>大部分算法技巧本质上是树的遍历问题</li></ol></li></ol><h3 id="算法的本质是穷举"><a href="#算法的本质是穷举" class="headerlink" title="算法的本质是穷举"></a>算法的本质是穷举</h3><ol><li>如何穷举：无遗漏穷举所有可能解（递归类 动态规划）</li><li>如何聪明的穷举：避免冗余的计算（非递归算法）</li></ol><ul><li><p>数组/单链表 系列算法</p></li><li><ul><li>单链表：双指针</li><li>二分搜索</li><li>滑动窗口</li><li>回文串</li><li>前缀和</li><li>差分数组</li></ul></li><li><p>二叉树 系列算法</p></li><li><ul><li>遍历一遍二叉树得出答案（回溯算法规划）</li><li>通过分解问题得出答案（动态规划）</li><li>图论相关算法</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;数据结构的存储方式只有两种：数组（顺序存储）和链表（链式存储）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组：可以随机访问，节省空间；但扩容困难&lt;/li&gt;
&lt;li&gt;链表：可插入或删除元素；但不能随机访问&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;数据结</summary>
      
    
    
    
    <category term="刷算法" scheme="http://wujundehuda.github.io/categories/%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法学习" scheme="http://wujundehuda.github.io/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>一份其实很短的LaTeX入门文档</title>
    <link href="http://wujundehuda.github.io/2022/08/28/%E4%B8%80%E4%BB%BD%E5%85%B6%E5%AE%9E%E5%BE%88%E7%9F%AD%E7%9A%84LaTeX%E5%85%A5%E9%97%A8%E6%96%87%E6%A1%A3/"/>
    <id>http://wujundehuda.github.io/2022/08/28/%E4%B8%80%E4%BB%BD%E5%85%B6%E5%AE%9E%E5%BE%88%E7%9F%AD%E7%9A%84LaTeX%E5%85%A5%E9%97%A8%E6%96%87%E6%A1%A3/</id>
    <published>2022-08-28T09:18:47.000Z</published>
    <updated>2022-08-28T09:29:14.566Z</updated>
    
    <content type="html"><![CDATA[<div class="tag link"><a class="link-card" title="原文章传送门" href="https://liam.page/2014/09/08/latex-introduction/"><div class="left"><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/20220828172643.png"/></div><div class="right"><p class="text">原文章传送门</p><p class="url">https://liam.page/2014/09/08/latex-introduction/</p></div></a></div><h2 id="优雅的-LaTeX"><a href="#优雅的-LaTeX" class="headerlink" title="优雅的 LaTeX"></a>优雅的 LaTeX</h2><p>有很多 Geeks 或者 LaTeX’s Fanatical Fans 过分地强调了 LaTeX 的一些并非重点的特性，以至于很多初学者会觉得 LaTeX 很神秘很复杂，从而引发了初学者的畏难情绪甚至是负面情绪。尽管这些 Fans 说得并没有错，我是说在事实上，但是他们的表达方式和内心态度却间接阻碍了 LaTeX 的发展，我想这也是和他们的初衷相悖的。</p><p>我曾经也受到过这些言论的影响，但幸运的事，至今为止我已经越过了这些障碍，并更加坚信了他们所言（LaTeX 的优点）的正确性。因此我想以我自己的方式，向更多的人介绍 LaTeX —— <strong>这个优雅，但有着自己高傲，却绝不复杂甚至神秘的东西</strong>。</p><blockquote><p>欢迎从校内转移过来的同学们，因为校内的技术原因，文章无法在校内继续更新。尽管非我之故，但还是给各位同学说声抱歉。同时，欢迎各位来到我的博客。<code>: )</code></p></blockquote><h2 id="你将从这里看到"><a href="#你将从这里看到" class="headerlink" title="你将从这里看到"></a>你将从这里看到</h2><ol><li>（几乎是）最简洁的 (La)TeX 编辑器——TeXworks——的基本使用方法；</li><li>如何使用 (Xe)LaTeX 进行简单的<strong>中英混排</strong>；</li><li>简单的文章组织结构；</li><li>如何用 (Xe)LaTeX 进行数学公式的排版；</li><li>如何在 (Xe)LaTeX 的文档中插入图片/表格；</li><li>如何进行简单的版面设置；</li><li>几个最常见的带有 TeX 的单词的含义；</li><li>出现问题应当如何处理/怎样聪明地提出你的问题——怎样从这里毕业。</li></ol><h2 id="你不会从这里看到"><a href="#你不会从这里看到" class="headerlink" title="你不会从这里看到"></a>你不会从这里看到</h2><ol><li><a href="https://liam.page/texlive/">如何安装 TeX 发行</a>；</li><li>特殊需求（特殊宏包）的解决方法；</li><li>关于若干 TeX 发行的好坏比较；</li><li>关于各种 TeX 编辑器的好坏比较；</li><li>过多的废话。</li></ol><h2 id="你应当如何阅读本文"><a href="#你应当如何阅读本文" class="headerlink" title="你应当如何阅读本文"></a>你应当如何阅读本文</h2><p>事实上本文在行文过程中，会有相当多的提示帮助你以正确的方式阅读。因此有必要在此先介绍一下最常用的一些标记。</p><ol><li><p>斜体：使用<em>斜体</em> 意味着如果忽略掉这些文字，你可能在<em>逻辑</em> 上很难理解后面某处的知识；</p></li><li><p>粗体：使用<strong>粗体</strong>意味如果忽略掉这些文字，你可能在<strong>TeX 的概念</strong>上很难理解后面某处的知识；</p></li><li><p>粗斜体：使用<strong><em>粗斜体\</em></strong> 基本是最重要的部分，是上述两种情况的合并；</p></li><li><p>引用：使用引用，</p><blockquote><p>表明这些文字在你第一次阅读本文的时候<em>不需要</em> 了解，其中的内容可能过于深奥，或者过于琐碎。对于第一次接触 TeX 的你（如果你是 TeX 资深使用者当然不在此列），如果了解到这些内容可能会使你困惑，并且不会从实际上增加你对 TeX 的领悟以及对 TeX 的好感。</p></blockquote></li></ol><h2 id="关于编辑器的简单介绍"><a href="#关于编辑器的简单介绍" class="headerlink" title="关于编辑器的简单介绍"></a>关于编辑器的简单介绍</h2><p>TeX 的源代码是后缀为 <code>.tex</code> 的纯文本文件。使用任意纯文本编辑器，都可以修改 <code>.tex</code> 文件：包括 Windows 自带的记事本程序，也包括专为 TeX 设计的编辑器（TeXworks, TeXmaker, TeXstudio, WinEdt 等），还包括一些通用的文本编辑器（Sublime Text, Atom, Visual Studio Code 等）。你可以在这些能够编辑纯文本文件的编辑器中任选其一作为你的 TeX 编辑器，也可以使用 TeX 发行自带的编辑器。最流行的两个 TeX 发行（TeX Live 和 MiKTeX）都带有 TeXworks 编辑器。</p><blockquote><p>所谓 TeX 发行，也叫 TeX 发行版、TeX 系统或者 TeX 套装，指的是包括 TeX 系统的各种可执行程序，以及他们执行时需要的一些辅助程序和宏包文档的集合。</p></blockquote><p>本文只介绍 TeXworks 的使用，原因有以下一些：</p><ul><li>TeXworks 是 TeX Live 自带的编辑器，而 TeX Live 是 TeX User Group 出品的跨平台发行版，各个操作系统都可以使用；</li><li>几乎所有 TeX 发行版都带有 TeXworks；</li><li>TeXworks 十分简洁，除了最基本的功能之外，没有其他复杂的东西，能使你将注意力集中在 TeX 的学习上。</li></ul><h3 id="启动-TeXworks"><a href="#启动-TeXworks" class="headerlink" title="启动 TeXworks"></a>启动 TeXworks</h3><p>启动 TeXworks 很简单，你可以在 Windows 启动对话框中输入 texworks 按回车。具体步骤是：</p><ul><li>按下键盘上的 Windows 徽标键，同时按下 R 键 —— <code>&lt;Win&gt; + R</code>;</li><li>键入 <code>texworks</code>；</li><li>回车。</li></ul><p>如果这样打不开 TeXworks，你可能需要从开始菜单找到 TeXworks 图标以启动；或者进入 TeX 系统的安装目录找到 TeXworks。</p><p>启动之后，TeXworks 的界面，会默认占据你屏幕的左半边，右半边留空。效果如下图：</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/818901c1jw1e44dgufrnpj20iy0kimxz.jpg" alt="img"></p><p>图中空白的部分，就是输入编辑文本的编辑框；在编辑框的右下角，显示有三个按钮，最左边的是换行符模式，中间是<em>编码模式</em> ，右边标示当前光标所在位置；编辑框的上方是工具栏，工具栏的右半部分使大家熟悉的功能（新建、打开、保存、撤消、恢复、剪切、复制、黏贴、查找、替换），工具栏的左边则是<em>编译按钮</em> （TeXworks 也称其为「排版工具」）；工具栏在往上，则是菜单栏，此处按下不表。</p><blockquote><p>Windows，Unix 等操作系统对待「换行符」是有不同的。索性 TeXworks 为我们做了足够的提示，方面我们的选择（点击一下那个按钮就知道了）。一般而言，保持默认即可。</p><p>字符（包括英文字符和中文字符）在计算机中，经过编码以二进制的形式存储在计算机中。如果编辑器编码和计算机内部编码不一致，则会导致所谓「乱码」的现象。TeXworks 默认使用 UTF8 编码，在我们的文档中不需要进行任何更改，而对于一些其他的文档可能需要按照要求更改编码。</p></blockquote><h3 id="排版工具"><a href="#排版工具" class="headerlink" title="排版工具"></a>排版工具</h3><p>TeXworks 为我们预设了若干排版工具（pdfTeX, pdfLaTeX, XeTeX, XeLaTeX 等），本文主要用到其中的 <strong><em>XeLaTeX\</em></strong>。关于这些排版工具的细节，讲解起来会有些复杂。因此此处按下不表，若有兴趣，可以参看<a href="https://liam.page/2014/09/08/latex-introduction/#TeX-家族">后文</a>。当你对 TeX 系统相当熟悉之后，也可以不使用 TeXworks 预设的工具，自己配置排版工具。</p><p>TeXworks 默认的排版工具是 pdfLaTeX。如果你希望更改这个默认值，可以在<em>编辑 - 首选项 - 排版 - 处理工具 - 默认</em> 中修改。</p><h2 id="第一篇文档"><a href="#第一篇文档" class="headerlink" title="第一篇文档"></a>第一篇文档</h2><h3 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello, world!"></a>Hello, world!</h3><p>在编辑框中，输入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">helloworld.tex</span><br><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">% 这里是导言区</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">Hello, world!</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>将文档保存在你希望的位置，然后在排版工具的下拉选框中选中 <strong>XeLaTeX</strong> 后，按下绿色的编译按钮。一会儿，如果没有意外，屏幕的右边就会出现编译之后结果。如下图：</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/818901c1jw1e44e55rnkkj211y0kmwgi.jpg" alt="img"></p><blockquote><p>请注意，由于操作系统编码和 TeX 内部实现的限制，在 Windows 平台上，TeX 涉及到的文件（包括 <code>.tex</code>, <code>.jpg</code> 等各类文件）都不要包含中文名字。否则，在编译时可能会因为编码问题导致稀奇古怪的报错。</p></blockquote><p>很容易发现，输入进编辑框的五行文字，在最终输出的 pdf 档中只显示了 1 行。事实上，交付 TeX 处理的文档内容，并不会全部输出。</p><p>此处的第一行 <code>\documentclass&#123;article&#125;</code> 中包含了一个控制序列（或称命令/标记）。所谓控制序列，是以反斜杠 <code>\</code> 开头，以第一个<strong><em>空格或非字母\</em></strong> 的字符结束的一串文字。它们不被输出，但是他们会影响输出文档的效果。这里的控制序列是 <code>documentclass</code>，它后面紧跟着的 <code>&#123;article&#125;</code> 代表这个控制序列有一个必要的参数，该参数的值为 <code>article</code>。这个控制序列的作用，是调用名为 <code>article</code> 的文档类。</p><p><strong><em>请注意，TeX 对控制序列的大小写是敏感的\</em></strong>。</p><blockquote><p>部分控制序列还有被方括号 <code>[]</code> 包括的可选参数。</p><p>所谓文档类，即是 TeX 系统预设的（或是用户自定的）一些格式的集合。不同的文档类在输出效果上会有差别。</p></blockquote><p>此处的第二行以 <code>%</code> 开头。TeX 以百分号 <code>%</code> 作为注释标记。具体来说，TeX 会忽略从 <code>%</code> 开始到当前行末尾的所有内容。这些内容不会被输出，也不影响最终排版效果，只供人类阅读。若要输出 <code>%</code> 字符本身，则需要在 <code>%</code> 之前加上反斜杠 <code>\</code> 进行转义（escape）。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">今年的净利润为 20\%，比去年高。</span><br></pre></td></tr></table></figure><p>此处 <code>%</code> 被当做正常的百分号处理，其后的文字也将被正常输出。</p><p>我们继续分析第一篇文档的内容。在注释行之后出现了控制序列 <code>begin</code>。这个控制序列总是与 <code>end</code> 成对出现。这两个控制序列以及他们中间的内容被称为「环境」；它们之后的第一个必要参数总是<strong>一致的</strong>，被称为环境名。</p><p>只有在 <code>document</code> 环境中的内容，才会被正常输出到文档中去或是作为控制序列对文档产生影响。也就是说，在 <code>\end&#123;document&#125;</code> 之后插入任何内容都是无效的。</p><p>从 <code>\documentclass&#123;article&#125;</code> 开始到 <code>\begin&#123;document&#125;</code> 之前的部分被称为导言区。你可以将导言区理解为是对整篇文档进行设置的区域——在导言区出现的控制序列，往往会影响整篇文档的格式。</p><blockquote><p>比如，我们通常在导言区设置页面大小、页眉页脚样式、章节标题样式等等。</p></blockquote><h3 id="实现中英文混排"><a href="#实现中英文混排" class="headerlink" title="实现中英文混排"></a>实现中英文混排</h3><blockquote><p>关于 LaTeX 的中文支持，首先要说的是：在现在，一切教你使用 <code>CJK</code> 宏包的模板、人、网页、书，都是糟糕的、有害的、恼人的、邪恶的和应该摒弃的。</p></blockquote><p>成功编译输出第一个文档之后，中国 TeX 用户面临的第二个普遍问题大概就是「实现中英文混排」了。众所周知，TeX 系统是高教授开发的。在 TeX 开发当初并没有考虑到亚洲文字的问题。因此早期的 TeX 系统并不能直接支持中文，必须要用其他工具先处理一下（或者是一些宏包之类的）。但是现在，XeTeX 原生支持 Unicode，并且可以方便地调用系统字体。可以说解决了困扰中国 TeX 使用者多年的大问题。至此，我们只需要使用几个简单的宏包，就能完成中文支持了。</p><p>所谓宏包，就是一系列控制序列的合集。这些控制序列太常用，以至于人们会觉得每次将他们写在导言区太过繁琐，于是将他们打包放在同一个文件中，成为所谓的宏包（台湾方面称之为「巨集套件」）。<code>\usepackage&#123;&#125;</code> 可以用来调用宏包。</p><p>除去中文支持，中文的版式处理和标点禁则也是不小的挑战。好在由吴凌云和江疆牵头，现在主要由刘海洋、李清和我维护的 <code>CTeX</code> 宏集一次性解决了这些问题。<code>CTeX</code> 宏集的优势在于，它能适配于多种编译方式；在内部处理好了中文和中文版式的支持，隐藏了这些细节；并且，提供了不少中文用户需要的功能接口。我们来看如何使用 <code>CTeX</code> 宏集来处理中英文混排的文档。</p><blockquote><p>请注意，<code>CTeX</code> 宏集和 <code>CTeX</code> 套装是两个不同的东西。<code>CTeX</code> 宏集本质是 LaTeX 宏的集合，包含若干文档类（<code>.cls</code> 文件）和宏包（<code>.sty</code> 文件）。<code>CTeX</code> 套装是一个<strong>过时的</strong> TeX 系统。</p><p>新版 <code>CTeX</code> 宏集的默认能够自动检测用户的操作系统，并为之配置合适的字库。对于 Windows 用户、Mac OS X 用户和 Linux 用户，都无需做任何配置，就能使用 <code>CTeX</code> 宏集来排版中文。[2015-05-20 更新]</p></blockquote><p>在 TeXworks 编辑框中输入以下内容，<strong>以 UTF-8 编码保存，使用 XeLaTeX 编译</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EC-mix.tex</span><br><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">你好，world!</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>如果没有意外，你将会看到类似下图的输出结果。</p><p><img src="https://liam.page/uploads/teaching/LaTeX/figures/818901c1jw1e44g5azwaej20j00kimy3.jpg" alt="img"></p><p>相较于之前的例子，这份代码只有细微的差异：</p><ol><li>文档类从 <code>article</code> 变为 <code>ctexart</code>；</li><li>增加了文档类选项 <code>UTF8</code>。</li></ol><blockquote><p>你也可以直接使用 <code>xeCJK</code> 宏包来支持中英文混排。不过大多数情况是不推荐这样做的。因此，如果你能抑制住你小小的好奇心，可以暂时略过这一段，回头再看不迟。<code>:)</code></p><p>在 TeXworks 编辑框中输入以下内容，保存，使用 XeLaTeX 编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xeCJK-demo.tex</span><br><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;xeCJK&#125; %调用 xeCJK 宏包</span><br><span class="line">\setCJKmainfont&#123;SimSun&#125; %设置 CJK 主字体为 SimSun （宋体）</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">你好，world!</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>如果一切顺利，你将会在屏幕右边的窗口，看见类似下图的输出结果。<br><img src="https://liam.page/uploads/teaching/LaTeX/figures/818901c1jw1e44g5azwaej20j00kimy3.jpg" alt="img"></p><p>除了 “document” 环境中同时出现了中文和英文，和最原始的 Hello, world! 不同点在于，导言区中多出了两条控制序列。他们的作用我已经用注释标出了。</p><p><code>\setCJKmainfont&#123;·&#125;</code>是定义在 “xeCJK” 宏包中的控制序列，它可以用来设置 CJK 主字体。</p><p>如果你的 TeX 系统提示找不到字体，请按以下提示操作。</p><p>Mac OS X 用户请参照<a href="https://liam.page/2014/11/02/latex-mactex-chinese-support/">这篇博客</a>中的方法，使用系统自带的字体册程序来查看系统字体。</p><p>非 Mac OS X 用户请按照如下步骤打开系统命令行（*nix系统请打开终端）：</p><ul><li>按下<code>&lt;win&gt; + R</code>；</li><li>键入<code>cmd</code>, 回车。</li></ul><p>在系统命令行中输入如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-list :lang=zh-cn &gt; C:\font_zh-cn.txt</span><br></pre></td></tr></table></figure><p>（相信使用 *nix 的你，一定知道如何修改上述命令达到你想要的效果）</p><p>打开 C 盘根目录下的 <code>C:\font_zh-cn.txt</code> 纯文本文档，里面的内容就是你当前系统可用的全部中文字体，形如：</p><p><img src="https://liam.page/uploads/teaching/LaTeX/figures/818901c1jw1e44gmvz7yuj20i40actcb.jpg" alt="img"></p><p>每一个小黑框之间的内容，就对应着一个可用的字体。这些小黑框实际上是换行符，但是由于 Windows 系统的原因，他们没有被正常显示。如果看着不爽，你可以尝试用 TeXworks 打开这个文件查看（放心，能够打开的）。以下是我用 gVim 打开的效果：</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/818901c1jw1e44gpsi9fpj20km0f478v.jpg" alt="img"></p><p>其中的每一行，都代表着一个可用的字体。其形式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;字体文件路径&gt;: &lt;字体标示名1&gt;, &lt;字体表示名2&gt;:Style=&lt;字体类型&gt;</span><br></pre></td></tr></table></figure><p>我们可以看到图中的倒数第四行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/WINDOWS/fonts/simsun.ttc: 宋体,SimSun:style=Regular</span><br></pre></td></tr></table></figure><p>出现了之前文档里调用的字体<code>SimSun</code>，此处表明该字体有两个表示名：<code>宋体</code>和<code>SimSun</code>，我们在<code>\setCJKmainfont&#123;·&#125;</code>中填入任意一个都有同样的效果。</p><p>因此，如果之前的文档无法编译通过，请在你的操作系统字体中，选取一个自己喜欢的，将它的字体表示名填入到<code>\setCJKmainfont&#123;·&#125;</code>中去。</p></blockquote><h2 id="组织你的文章"><a href="#组织你的文章" class="headerlink" title="组织你的文章"></a>组织你的文章</h2><h3 id="作者、标题、日期"><a href="#作者、标题、日期" class="headerlink" title="作者、标题、日期"></a>作者、标题、日期</h3><p>保存并用 XeLaTeX 编译如下文档，查看效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\title&#123;你好，world!&#125;</span><br><span class="line">\author&#123;Liam&#125;</span><br><span class="line">\date&#123;\today&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\maketitle</span><br><span class="line">你好，world!</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>导言区复杂了很多，但和之前的文档主要的区别只有一处：定义了标题、作者、日期。</p><p>在 <code>document</code> 环境中，除了原本的<code>你好，world!</code>，还多了一个控制序列 <code>maketitle</code>。这个控制序列能将在导言区中定义的标题、作者、日期按照预定的格式展现出来。</p><blockquote><p>使用<code>titling</code>宏包可以修改上述默认格式。参考<a href="http://texdoc.net/texmf-dist/doc/latex/titling/titling.pdf">TeXdoc</a>。</p></blockquote><h3 id="章节和段落"><a href="#章节和段落" class="headerlink" title="章节和段落"></a>章节和段落</h3><p>保存并用 XeLaTeX 编译如下文档，查看效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\title&#123;你好，world!&#125;</span><br><span class="line">\author&#123;Liam&#125;</span><br><span class="line">\date&#123;\today&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\maketitle</span><br><span class="line">\section&#123;你好中国&#125;</span><br><span class="line">中国在East Asia.</span><br><span class="line">\subsection&#123;Hello Beijing&#125;</span><br><span class="line">北京是capital of China.</span><br><span class="line">\subsubsection&#123;Hello Dongcheng District&#125;</span><br><span class="line">\paragraph&#123;Tian&#x27;anmen Square&#125;</span><br><span class="line">is in the center of Beijing</span><br><span class="line">\subparagraph&#123;Chairman Mao&#125;</span><br><span class="line">is in the center of 天安门广场。</span><br><span class="line">\subsection&#123;Hello 山东&#125;</span><br><span class="line">\paragraph&#123;山东大学&#125; is one of the best university in 山东。</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>在文档类 <code>article</code>/<code>ctexart</code> 中，定义了五个控制序列来调整行文组织结构。他们分别是</p><ul><li><code>\section&#123;·&#125;</code></li><li><code>\subsection&#123;·&#125;</code></li><li><code>\subsubsection&#123;·&#125;</code></li><li><code>\paragraph&#123;·&#125;</code></li><li><code>\subparagraph&#123;·&#125;</code></li></ul><blockquote><p>在<code>report</code>/<code>ctexrep</code>中，还有<code>\chapter&#123;·&#125;</code>；在文档类<code>book</code>/<code>ctexbook</code>中，还定义了<code>\part&#123;·&#125;</code>。</p></blockquote><h3 id="插入目录"><a href="#插入目录" class="headerlink" title="插入目录"></a>插入目录</h3><p>在上一节的文档中，找到 <code>\maketitle</code>，在它的下面插入控制序列 <code>\tableofcontents</code>，保存并用 XeLaTeX 编译<strong>两次</strong>，观察效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\title&#123;你好，world!&#125;</span><br><span class="line">\author&#123;Liam&#125;</span><br><span class="line">\date&#123;\today&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\maketitle</span><br><span class="line">\tableofcontents</span><br><span class="line">\section&#123;你好中国&#125;</span><br><span class="line">中国在East Asia.</span><br><span class="line">\subsection&#123;Hello Beijing&#125;</span><br><span class="line">北京是capital of China.</span><br><span class="line">\subsubsection&#123;Hello Dongcheng District&#125;</span><br><span class="line">\paragraph&#123;Tian&#x27;anmen Square&#125;</span><br><span class="line">is in the center of Beijing</span><br><span class="line">\subparagraph&#123;Chairman Mao&#125;</span><br><span class="line">is in the center of 天安门广场。</span><br><span class="line">\subsection&#123;Hello 山东&#125;</span><br><span class="line">\paragraph&#123;山东大学&#125; is one of the best university in 山东。</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><blockquote><p>试试交换 <code>\maketitle</code> 和 <code>\tableofcontents</code> 的顺序，看看会发生什么，想想为什么。</p></blockquote><p>请注意，在「你好中国」这一节中，两次「中国在East Asia.」中夹有一个空行，但输出却只有一个换行并没有空行。这是因为 LaTeX 将一个换行当做是一个简单的空格来处理，如果需要换行另起一段，则需要用两个换行（一个空行）来实现。</p><h2 id="插入数学公式"><a href="#插入数学公式" class="headerlink" title="插入数学公式"></a>插入数学公式</h2><p>首先恭喜你看到这里。如果前面的几个文档你都认真编译过了，那么你已经可以胜任许多文档的排版工作。下面我们进入 LaTeX 最为犀利的部分。</p><p>这部分的演示中，为了节省篇幅，将取消导言区中中文支持的部分。在实际使用中，你只需要将导言区中的相关部分加上，就可以同时使用中文和编写数学公式了。</p><p>为了使用 AMS-LaTeX 提供的数学功能，我们需要在导言区加载 <code>amsmath</code> 宏包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;amsmath&#125;</span><br></pre></td></tr></table></figure><h3 id="数学模式"><a href="#数学模式" class="headerlink" title="数学模式"></a>数学模式</h3><p>LaTeX 的数学模式有两种：行内模式 (inline) 和行间模式 (display)。前者在正文的行文中，插入数学公式；后者独立排列单独成行，并自动居中。</p><p>在行文中，使用 <script type="math/tex">...</script> 可以插入行内公式，使用 <code>\[ ... \]</code> 可以插入行间公式，如果需要对行间公式进行编号，则可以使用 <code>equation</code> 环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;equation&#125;</span><br><span class="line">...</span><br><span class="line">\end&#123;equation&#125;</span><br></pre></td></tr></table></figure><blockquote><p>行内公式也可以使用 <code>\(...\)</code> 或者 <code>\begin&#123;math&#125; ... \end&#123;math&#125;</code> 来插入，但略显麻烦。<br>无编号的行间公式也可以使用 <code>\begin&#123;displaymath&#125; ... \end&#123;displaymath&#125;</code> 或者 <code>\begin&#123;equation*&#125; ... \end&#123;equation*&#125;</code> 来插入，但略显麻烦。（<code>equation*</code> 中的 <code>*</code> 表示环境不编号）<br>也有 plainTeX 风格的 $$$ … $$$ 来插入不编号的行间公式。但是在 LaTeX 中这样做会改变行文的默认行间距，不推荐。请参考<a href="https://www.zhihu.com/question/27589739/answer/37237684">我的回答</a>。</p></blockquote><h3 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h3><p>示例代码（请保存后，使用 XeLaTeX 编译，查看效果）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;amsmath&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">Einstein &#x27;s $E=mc^2$.</span><br><span class="line"></span><br><span class="line">\[ E=mc^2. \]</span><br><span class="line"></span><br><span class="line">\begin&#123;equation&#125;</span><br><span class="line">E=mc^2.</span><br><span class="line">\end&#123;equation&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>在这里提一下关于公式标点使用的规范。行内公式和行间公式对标点的要求是不同的：行内公式的标点，应该放在数学模式的限定符之外，而行间公式则应该放在数学模式限定符之内。</p><p>在数学模式中，需要表示上标，可以使用 <code>^</code> 来实现（下标则是 <code>_</code>）。<strong>它默认只作用于之后的一个字符</strong>，如果想对连续的几个字符起作用，请将这些字符用花括号 <code>&#123;&#125;</code> 括起来，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\[ z = r\cdot e^&#123;2\pi i&#125;. \]</span><br></pre></td></tr></table></figure><h3 id="根式与分式"><a href="#根式与分式" class="headerlink" title="根式与分式"></a>根式与分式</h3><p>根式用 <code>\sqrt&#123;·&#125;</code> 来表示，分式用 <code>\frac&#123;·&#125;&#123;·&#125;</code> 来表示（第一个参数为分子，第二个为分母）。</p><p>示例代码（请保存后，使用 XeLaTeX 编译，查看效果）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;amsmath&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">$\sqrt&#123;x&#125;$, $\frac&#123;1&#125;&#123;2&#125;$.</span><br><span class="line"></span><br><span class="line">\[ \sqrt&#123;x&#125;, \]</span><br><span class="line"></span><br><span class="line">\[ \frac&#123;1&#125;&#123;2&#125;. \]</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>可以发现，在行间公式和行内公式中，分式的输出效果是有差异的。如果要强制行内模式的分式显示为行间模式的大小，可以使用 <code>\dfrac</code>, 反之可以使用 <code>\tfrac</code>。</p><blockquote><p>在行内写分式，你可能会喜欢 <code>xfrac</code> 宏包提供的 <code>\sfrac</code> 命令的效果。</p><p>排版繁分式，你应该使用 <code>\cfrac</code> 命令。</p></blockquote><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>一些小的运算符，可以在数学模式下直接输入；另一些需要用控制序列生成，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\[ \pm\; \times \; \div\; \cdot\; \cap\; \cup\;</span><br><span class="line">\geq\; \leq\; \neq\; \approx \; \equiv \]</span><br></pre></td></tr></table></figure><p>连加、连乘、极限、积分等大型运算符分别用 <code>\sum</code>, <code>\prod</code>, <code>\lim</code>, <code>\int</code> 生成。他们的上下标在行内公式中被压缩，以适应行高。我们可以用 <code>\limits</code> 和 <code>\nolimits</code> 来强制显式地指定是否压缩这些上下标。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ \sum_&#123;i=1&#125;^n i\quad \prod_&#123;i=1&#125;^n $</span><br><span class="line">$ \sum\limits _&#123;i=1&#125;^n i\quad \prod\limits _&#123;i=1&#125;^n $</span><br><span class="line">\[ \lim_&#123;x\to0&#125;x^2 \quad \int_a^b x^2 dx \]</span><br><span class="line">\[ \lim\nolimits _&#123;x\to0&#125;x^2\quad \int\nolimits_a^b x^2 dx \]</span><br></pre></td></tr></table></figure><p>多重积分可以使用 <code>\iint</code>, <code>\iiint</code>, <code>\iiiint</code>, <code>\idotsint</code> 等命令输入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\[ \iint\quad \iiint\quad \iiiint\quad \idotsint \]</span><br></pre></td></tr></table></figure><h3 id="定界符（括号等）"><a href="#定界符（括号等）" class="headerlink" title="定界符（括号等）"></a>定界符（括号等）</h3><p>各种括号用 <code>()</code>, <code>[]</code>, <code>\&#123;\&#125;</code>, <code>\langle\rangle</code> 等命令表示；注意花括号通常用来输入命令和环境的参数，所以在数学公式中它们前面要加 <code>\</code>。因为 LaTeX 中 <code>|</code> 和 <code>\|</code> 的应用过于随意，amsmath 宏包推荐用 <code>\lvert\rvert</code> 和 <code>\lVert\rVert</code> 取而代之。</p><p>为了调整这些定界符的大小，amsmath 宏包推荐使用 <code>\big</code>, <code>\Big</code>, <code>\bigg</code>, <code>\Bigg</code> 等一系列命令放在上述括号前面调整大小。</p><blockquote><p>有时你可能会觉得 amsmath 宏包提供的定界符放大命令不太够用。通常这意味着你的公式太过复杂。此时你应当首先考虑将公式中的部分提出去，以字母符号代替以简化公式。如果你真的想要排版如此复杂的公式，你可以参考我<a href="https://liam.page/2018/11/09/the-bigger-than-bigger-delimiter-in-LaTeX/">这篇博文</a>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\[ \Biggl(\biggl(\Bigl(\bigl((x)\bigr)\Bigr)\biggr)\Biggr) \]</span><br><span class="line">\[ \Biggl[\biggl[\Bigl[\bigl[[x]\bigr]\Bigr]\biggr]\Biggr] \]</span><br><span class="line">\[ \Biggl \&#123;\biggl \&#123;\Bigl \&#123;\bigl \&#123;\&#123;x\&#125;\bigr \&#125;\Bigr \&#125;\biggr \&#125;\Biggr\&#125; \]</span><br><span class="line">\[ \Biggl\langle\biggl\langle\Bigl\langle\bigl\langle\langle x</span><br><span class="line">\rangle\bigr\rangle\Bigr\rangle\biggr\rangle\Biggr\rangle \]</span><br><span class="line">\[ \Biggl\lvert\biggl\lvert\Bigl\lvert\bigl\lvert\lvert x</span><br><span class="line">\rvert\bigr\rvert\Bigr\rvert\biggr\rvert\Biggr\rvert \]</span><br><span class="line">\[ \Biggl\lVert\biggl\lVert\Bigl\lVert\bigl\lVert\lVert x</span><br><span class="line">\rVert\bigr\rVert\Bigr\rVert\biggr\rVert\Biggr\rVert \]</span><br></pre></td></tr></table></figure><p><img src="https://liam.page/uploads/teaching/LaTeX/figures/818901c1jw1e44jk66wwfj204x0a4aa0.jpg" alt="img"></p><h3 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h3><p>省略号用 <code>\dots</code>, <code>\cdots</code>, <code>\vdots</code>, <code>\ddots</code> 等命令表示。<code>\dots</code> 和 <code>\cdots</code> 的纵向位置不同，前者一般用于有下标的序列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\[ x_1,x_2,\dots ,x_n\quad 1,2,\cdots ,n\quad</span><br><span class="line">\vdots\quad \ddots \]</span><br></pre></td></tr></table></figure><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p><code>amsmath</code> 的 <code>pmatrix</code>, <code>bmatrix</code>, <code>Bmatrix</code>, <code>vmatrix</code>, <code>Vmatrix</code> 等环境可以在矩阵两边加上各种分隔符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\[ \begin&#123;pmatrix&#125; a&amp;b\\c&amp;d \end&#123;pmatrix&#125; \quad</span><br><span class="line">\begin&#123;bmatrix&#125; a&amp;b\\c&amp;d \end&#123;bmatrix&#125; \quad</span><br><span class="line">\begin&#123;Bmatrix&#125; a&amp;b\\c&amp;d \end&#123;Bmatrix&#125; \quad</span><br><span class="line">\begin&#123;vmatrix&#125; a&amp;b\\c&amp;d \end&#123;vmatrix&#125; \quad</span><br><span class="line">\begin&#123;Vmatrix&#125; a&amp;b\\c&amp;d \end&#123;Vmatrix&#125; \]</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://liam.page/uploads/teaching/LaTeX/figures/818901c1jw1e44jpqbz2aj208k024744.jpg" alt="img"></p><p>使用 <code>smallmatrix</code> 环境，可以生成行内公式的小矩阵。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Marry has a little matrix $ ( \begin&#123;smallmatrix&#125; a&amp;b\\c&amp;d \end&#123;smallmatrix&#125; ) $.</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://liam.page/uploads/teaching/LaTeX/figures/818901c1jw1e44jsd9ldbj20680200si.jpg" alt="img"></p><h3 id="多行公式"><a href="#多行公式" class="headerlink" title="多行公式"></a>多行公式</h3><p>有的公式特别长，我们需要手动为他们换行；有几个公式是一组，我们需要将他们放在一起；还有些类似分段函数，我们需要给它加上一个左边的花括号。</p><h4 id="长公式"><a href="#长公式" class="headerlink" title="长公式"></a>长公式</h4><h5 id="不对齐"><a href="#不对齐" class="headerlink" title="不对齐"></a>不对齐</h5><p>无须对齐的长公式可以使用 <code>multline</code> 环境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;multline&#125;</span><br><span class="line">x = a+b+c+&#123;&#125; \\</span><br><span class="line">d+e+f+g</span><br><span class="line">\end&#123;multline&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://liam.page/uploads/teaching/LaTeX/figures/818901c1jw1e44jzfychej20dv02sjr6.jpg" alt="img"></p><p>如果不需要编号，可以使用 <code>multline*</code> 环境代替。</p><h5 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h5><p>需要对齐的公式，可以使用 <code>aligned</code> <em>次环境</em>来实现，它必须包含在数学环境之内。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\[\begin&#123;aligned&#125;</span><br><span class="line">x =&#123;&#125;&amp; a+b+c+&#123;&#125; \\</span><br><span class="line">&amp;d+e+f+g</span><br><span class="line">\end&#123;aligned&#125;\]</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://liam.page/uploads/teaching/LaTeX/figures/818901c1jw1e44k2acde4j205g02ft8h.jpg" alt="img"></p><h4 id="公式组"><a href="#公式组" class="headerlink" title="公式组"></a>公式组</h4><p>无需对齐的公式组可以使用 <code>gather</code> 环境，需要对齐的公式组可以使用 <code>align</code> 环境。他们都带有编号，如果不需要编号可以使用带星花的版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;gather&#125;</span><br><span class="line">a = b+c+d \\</span><br><span class="line">x = y+z</span><br><span class="line">\end&#123;gather&#125;</span><br><span class="line">\begin&#123;align&#125;</span><br><span class="line">a &amp;= b+c+d \\</span><br><span class="line">x &amp;= y+z</span><br><span class="line">\end&#123;align&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://liam.page/uploads/teaching/LaTeX/figures/818901c1jw1e44k5od3xaj209u04lweb.jpg" alt="img"></p><blockquote><p>请注意，不要使用 <code>eqnarray</code> 环境。原因可以参考：</p><ul><li><a href="http://www.math.uiuc.edu/~hildebr/tex/displays.html"><code>eqnarray</code> 是糟糕的</a></li><li><a href="http://texblog.net/latex-archive/maths/eqnarray-align-environment/"><code>eqnarray</code> 是有害的</a></li><li><a href="http://www.tex.ac.uk/cgi-bin/texfaq2html?label=eqnarray"><code>eqnarray</code> 是恼人的</a></li><li><a href="http://www.tug.org/pracjourn/2006-4/madsen/"><code>eqnarray</code> 是邪恶的</a></li></ul></blockquote><h4 id="分段函数"><a href="#分段函数" class="headerlink" title="分段函数"></a>分段函数</h4><p>分段函数可以用<code>cases</code>次环境来实现，它必须包含在数学环境之内。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\[ y= \begin&#123;cases&#125;</span><br><span class="line">-x,\quad x\leq 0 \\</span><br><span class="line">x,\quad x&gt;0</span><br><span class="line">\end&#123;cases&#125; \]</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://liam.page/uploads/teaching/LaTeX/figures/818901c1jw1e44k7zto1wj205o01pt8i.jpg" alt="img"></p><h3 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h3><p>站在我个人的角度，我建议 LaTeX 用户应当尽可能避免使用辅助工具输入数学公式。但对于急用的初学者而言，适当地使用辅助工具（而不形成依赖）也是有一些收益的。因此这里介绍一些关于数学公式的辅助工具。</p><ul><li><a href="https://mathpix.com/">https://mathpix.com/</a> 能够通过热键呼出截屏，而后将截屏中的公式转换成 LaTeX 数学公式的代码。</li><li><a href="http://detexify.kirelabs.org/classify.html">http://detexify.kirelabs.org/classify.html</a> 允许用户用鼠标在输入区绘制单个数学符号的样式，系统会根据样式返回对应的 LaTeX 代码（和所需的宏包）。这在查询不熟悉的数学符号时特别有用。</li></ul><h2 id="插入图片和表格"><a href="#插入图片和表格" class="headerlink" title="插入图片和表格"></a>插入图片和表格</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>关于 LaTeX 插图，首先要说的是：「LaTeX 只支持 <code>.eps</code> 格式的图档」这个说法是错误的。</p><p>在 LaTeX 中插入图片，有很多种方式。最好用的应当属利用 <code>graphicx</code> 宏包提供的 <code>\includegraphics</code> 命令。比如你在你的 TeX 源文件同目录下，有名为 <code>a.jpg</code> 的图片，你可以用这样的方式将它插入到输出文档中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\includegraphics&#123;a.jpg&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>图片可能很大，超过了输出文件的纸张大小，或者干脆就是你自己觉得输出的效果不爽。这时候你可以用 <code>\includegraphics</code> 控制序列的可选参数来控制。比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\includegraphics[width = .8\textwidth]&#123;a.jpg&#125;</span><br></pre></td></tr></table></figure><p>这样图片的宽度会被缩放至页面宽度的百分之八十，图片的总高度会按比例缩放。</p><blockquote><p><code>\includegraphics</code> 控制序列还有若干其他的可选参数可供使用，一般并用不到。感兴趣的话，可以去查看<a href="http://texdoc.net/texmf-dist/doc/latex/graphics/graphicx.pdf">该宏包的文档</a>。</p></blockquote><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><code>tabular</code> 环境提供了最简单的表格功能。它用 <code>\hline</code> 命令表示横线，在列格式中用 <code>|</code> 表示竖线；用 <code>&amp;</code> 来分列，用 <code>\\</code> 来换行；每列可以采用居左、居中、居右等横向对齐方式，分别用 <code>l</code>、<code>c</code>、<code>r</code> 来表示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;tabular&#125;&#123;|l|c|r|&#125;</span><br><span class="line"> \hline</span><br><span class="line">操作系统&amp; 发行版&amp; 编辑器\\</span><br><span class="line"> \hline</span><br><span class="line">Windows &amp; MikTeX &amp; TexMakerX \\</span><br><span class="line"> \hline</span><br><span class="line">Unix/Linux &amp; teTeX &amp; Kile \\</span><br><span class="line"> \hline</span><br><span class="line">Mac OS &amp; MacTeX &amp; TeXShop \\</span><br><span class="line"> \hline</span><br><span class="line">通用&amp; TeX Live &amp; TeXworks \\</span><br><span class="line"> \hline</span><br><span class="line">\end&#123;tabular&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://liam.page/uploads/teaching/LaTeX/figures/818901c1jw1e44ku9n696j20cj05haad.jpg" alt="img"></p><h3 id="浮动体"><a href="#浮动体" class="headerlink" title="浮动体"></a>浮动体</h3><p>插图和表格通常需要占据大块空间，所以在文字处理软件中我们经常需要调整他们的位置。<code>figure</code> 和 <code>table</code> 环境可以自动完成这样的任务；这种自动调整位置的环境称作浮动体(float)。我们以 <code>figure</code> 为例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;[htbp]</span><br><span class="line">\centering</span><br><span class="line">\includegraphics&#123;a.jpg&#125;</span><br><span class="line">\caption&#123;有图有真相&#125;</span><br><span class="line">\label&#123;fig:myphoto&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure><p><code>htbp</code> 选项用来指定插图的理想位置，这几个字母分别代表 here, top, bottom, float page，也就是就这里、页顶、页尾、浮动页（专门放浮动体的单独页面或分栏）。<code>\centering</code> 用来使插图居中；<code>\caption</code> 命令设置插图标题，LaTeX 会自动给浮动体的标题加上编号。注意 <code>\label</code> 应该放在标题命令之后。</p><blockquote><p>图片和表格的各种特殊效果，限于篇幅此处无法详叙。请查看最后一章推荐的文档。</p><p>如果你想了解 LaTeX 的浮动体策略算法细节，你可以参考我博客中<a href="https://liam.page/series/#LaTeX-中的浮动体">关于浮动体的系列文章</a></p><p>如果你困惑于「为什么图表会乱跑」或者「怎样让图表不乱跑」，请看<a href="https://www.zhihu.com/question/25082703/answer/30038248">我的回答</a>。</p></blockquote><h2 id="版面设置"><a href="#版面设置" class="headerlink" title="版面设置"></a>版面设置</h2><h3 id="页边距"><a href="#页边距" class="headerlink" title="页边距"></a>页边距</h3><p>设置页边距，推荐使用 <code>geometry</code> 宏包。可以在<a href="http://texdoc.net/texmf-dist/doc/latex/geometry/geometry.pdf">这里</a>查看它的说明文档。</p><p>比如我希望，将纸张的长度设置为 20cm、宽度设置为 15cm、左边距 1cm、右边距 2cm、上边距 3cm、下边距 4cm，可以在导言区加上这样几行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;geometry&#125;</span><br><span class="line">\geometry&#123;papersize=&#123;20cm,15cm&#125;&#125;</span><br><span class="line">\geometry&#123;left=1cm,right=2cm,top=3cm,bottom=4cm&#125;</span><br></pre></td></tr></table></figure><h3 id="页眉页脚"><a href="#页眉页脚" class="headerlink" title="页眉页脚"></a>页眉页脚</h3><p>设置页眉页脚，推荐使用 <code>fancyhdr</code> 宏包。可以在<a href="http://texdoc.net/texmf-dist/doc/latex/fancyhdr/fancyhdr.pdf">这里</a>查看它的说明文档。</p><p>比如我希望，在页眉左边写上我的名字，中间写上今天的日期，右边写上我的电话；页脚的正中写上页码；页眉和正文之间有一道宽为 0.4pt 的横线分割，可以在导言区加上如下几行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;fancyhdr&#125;</span><br><span class="line">\pagestyle&#123;fancy&#125;</span><br><span class="line">\lhead&#123;\author&#125;</span><br><span class="line">\chead&#123;\date&#125;</span><br><span class="line">\rhead&#123;152xxxxxxxx&#125;</span><br><span class="line">\lfoot&#123;&#125;</span><br><span class="line">\cfoot&#123;\thepage&#125;</span><br><span class="line">\rfoot&#123;&#125;</span><br><span class="line">\renewcommand&#123;\headrulewidth&#125;&#123;0.4pt&#125;</span><br><span class="line">\renewcommand&#123;\headwidth&#125;&#123;\textwidth&#125;</span><br><span class="line">\renewcommand&#123;\footrulewidth&#125;&#123;0pt&#125;</span><br></pre></td></tr></table></figure><h3 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h3><p>CTeX 宏集已经处理好了首行缩进的问题（自然段前空两格汉字宽度）。因此，使用 CTeX 宏集进行中西文混合排版时，我们不需要关注首行缩进的问题。</p><blockquote><p>如果你因为某些原因选择不适用 CTeX 宏集（不推荐）进行中文支持和版式设置，则你需要做额外的一些工作。</p><ul><li>调用 <code>indentfirst</code> 宏包。具体来说，中文习惯于每个自然段的段首都空出两个中文汉字的长度作为首行缩进，但西文行文习惯于不在逻辑节（<code>\section</code> 等）之后缩进。使用改宏包可使 LaTeX 在每个自然段都首行缩进。</li><li>设置首行缩进长度 <code>\setlength&#123;\parindent&#125;&#123;2\ccwd&#125;</code>。其中 <code>\ccwd</code> 是 <code>xeCJK</code> 定义的宏，它表示当前字号中一个中文汉字的宽度。</li></ul></blockquote><h3 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h3><p>我们可以通过 <code>setspace</code> 宏包提供的命令来调整行间距。比如在导言区添加如下内容，可以将行距设置为字号的 1.5 倍：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;setspace&#125;</span><br><span class="line">\onehalfspacing</span><br></pre></td></tr></table></figure><p>具体可以查看该宏包的<a href="http://texdoc.net/texmf-dist/doc/latex/setspace/README">文档</a>。</p><blockquote><p>请注意用词的差别：</p><ul><li>行距是字号的 1.5 倍；</li><li>1.5 倍行距。</li></ul><p>事实上，这不是设置 1.5 倍行距的正确方法，请参考<a href="https://liam.page/2013/10/17/LaTeX-Linespace/">这篇博文</a>。另外，<a href="https://github.com/RuixiZhang42">RuixiZhang</a> 开发了 <a href="https://github.com/CTeX-org/ctex-kit/tree/master/zhlineskip">zhlineskip</a> 宏包，提供了对中西文混排更细致的行距控制能力。</p></blockquote><h3 id="段间距"><a href="#段间距" class="headerlink" title="段间距"></a>段间距</h3><p>我们可以通过修改长度 <code>\parskip</code> 的值来调整段间距。例如在导言区添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\addtolength&#123;\parskip&#125;&#123;.4em&#125;</span><br></pre></td></tr></table></figure><p>则可以在原有的基础上，增加段间距 0.4em。如果需要减小段间距，只需将该数值改为负值即可。</p><h2 id="TeX-家族"><a href="#TeX-家族" class="headerlink" title="TeX 家族"></a>TeX 家族</h2><p>恭喜你终于看到了这里。如果你认真完成了上面所有的练习，并琢磨了其中的意义，相信你已经可以用 LaTeX 排版出漂亮的文档了。现在我们说一点历史，帮助你更好地理解 TeX 这个系统。</p><p>带有 TeX 的词，仅仅是本文就已经提到了 TeX, LaTeX, XeLaTeX。通常中国学生面对不了解意思的一群形近单词，都会有一种「本能的恐惧」（笑~）。因此，「大神们」在为新手介绍 TeX 的时候，如果互相争论 「XXTeX 比 YYTeX 好」或者是「XXTeX 的 YYTeX 如何如何」，往往会蹦出下面这些带有 TeX 的词汇：<br>TeX, pdfTeX, XeTeX, LuaTeX, LaTeX, pdfLaTeX, XeLaTeX …</p><p>事实上，这部分的内容太过复杂，我自己的了解也实在有限。所以下面这部分的内容也只能是对我了解到的知识的一个概括，甚至可能有些许谬误。所以大家只需要将这部分的内容当做是一个参考就可以了。</p><h3 id="TeX-LaTeX"><a href="#TeX-LaTeX" class="headerlink" title="TeX - LaTeX"></a>TeX - LaTeX</h3><p>TeX 是高德纳（Donald Ervin Knuth，1938年1月10日 —）教授<del>愤世嫉俗</del>追求完美做出来的排版引擎，同时也是该引擎使用的标记语言（Markup Language）的名称。这里所谓的引擎，是指能够实现断行、分页等操作的程序（请注意这并不是定义）；这里的标记语言，是指一种将控制命令和文本结合起来的格式，它的主体是其中的文本而控制命令则实现一些特殊效果（同样请注意这并不是定义）。</p><blockquote><p>你可以在<a href="http://en.wikipedia.org/wiki/TeX">这里</a>找到关于 TeX 引擎的具体描述；</p><p>你可以在<a href="http://en.wikipedia.org/wiki/Markup_language">这里</a>找到关于标记语言的具体描述。</p></blockquote><p>而 LaTeX 则是 L. Lamport （1941年2月7日 — ） 教授开发的基于 TeX 的排版系统。实际上 LaTeX 利用 TeX 的控制命令，定义了许多新的控制命令并封装成一个可执行文件。这个可执行文件会去解释 LaTeX 新定义的命令成为 TeX 的控制命令，并最终交由 TeX 引擎进行排版。</p><blockquote><p>实际上，LaTeX 是基于一个叫做 plain TeX 的格式的。plain TeX 是高德纳教授为了方便用户，自己基于原始的 TeX 定义的格式，但实际上 plain TeX 的命令仍然十分晦涩。至于原始的 TeX 直接使用的人就更少了，因此 plain TeX 格式逐渐就成为了 TeX 格式的同义词，尽管他们事实上是不同的。</p></blockquote><p>因此在 TeX - LaTeX 组合中，</p><ol><li>最终进行断行、分页等操作的，是 TeX 引擎；</li><li>LaTeX 实际上是一个工具，它将用户按照它的格式编写的文档解释成 TeX 引擎能理解的形式并交付给 TeX 引擎处理，再将最终结果返回给用户。</li></ol><h3 id="pdfTeX-pdfLaTeX"><a href="#pdfTeX-pdfLaTeX" class="headerlink" title="pdfTeX - pdfLaTeX"></a>pdfTeX - pdfLaTeX</h3><p>TeX 系统生成的文件是 <em>dvi</em> 格式，虽然可以用其他程序将其转换为例如 pdf 等更为常见的格式，但是毕竟不方便。</p><blockquote><p>dvi 格式是为了排版而产生的，它本身并不支持所谓的「交叉引用」，pdfTeX 直接输出 pdf 格式的文档，这也是 pdfTeX 相对 TeX 进步（易用性方面）的地方。</p></blockquote><p>为了解决这个问题，Hàn Thế Thành 博士在他的博士论文中提出了 pdfTeX 这个对 TeX 引擎的扩展。二者最主要的差别就是 pdfTeX 直接输出 pdf 格式文档，而 TeX 引擎则输出 dvi 格式的文档。</p><blockquote><p>pdfTeX 的信息可以查看<a href="http://en.wikipedia.org/wiki/PdfTeX">wiki</a>.</p></blockquote><p>pdfLaTeX 这个程序的主要工作依旧是将 LaTeX 格式的文档进行解释，不过此次是将解释之后的结果交付给 pdfTeX 引擎处理。</p><h3 id="XeTeX-XeLaTeX"><a href="#XeTeX-XeLaTeX" class="headerlink" title="XeTeX - XeLaTeX"></a>XeTeX - XeLaTeX</h3><p>高德纳教授在实现 TeX 的当初并没有考虑到中日韩等字符的处理，而只支持 ASCII 字符。这并不是说中日韩字符就无法使用 TeX 引擎排版了，事实上 TeX 将每个字符用一个框包括起来（这被称为<strong>盒子</strong>）然后将一个个的盒子按照一定规则排列起来，因而 TeX 的算法理论上适用于任何字符。ASCII 字符简单理解，就是在半角模式下你的键盘能直接输出的字符。</p><p>在 XeTeX 出现之前，为了能让 TeX 系统排版中文，国人曾使用了 天元、CCT、<strong>CJK</strong> 等手段处理中文。其中 天元和CCT 现在已经基本不用，CJK 因为使用时间长且效果相对较好，现在还有人使用。</p><p>不同于 CJK 等方式使用 TeX 和 pdfTeX 这两个不直接支持 Unicode 字符的引擎，XeTeX 引擎直接支持 Unicode 字符。也就是说现在不使用 CJK 也能排版中日韩文的文档了，并且这种方式要比之前的方式更加优秀。</p><p>XeLaTeX 和 XeTeX 的关系与 pdfLaTeX 和 pdfTeX 的关系类似，这里不再赘述。</p><p>使用 XeTeX 引擎需要使用 UTF-8 编码。</p><blockquote><p>所谓编码就是字符在计算机储存时候的对应关系。例如，假设有一种编码，将汉字「你」对应为数字「1」；「好」对应为数字「2」，则含有「你好」的纯文本文件，在计算机中储存为「12」（读取文件的时候，将「12」再转换为「你好」显示在屏幕上或打印出来）。</p><p>UTF-8 编码是 Unicode 编码的一种，可以参考它的 <a href="http://en.wikipedia.org/wiki/UTF-8">wiki</a>.</p></blockquote><h3 id="LuaTeX"><a href="#LuaTeX" class="headerlink" title="LuaTeX"></a>LuaTeX</h3><p>LuaTeX 是正在开发完善的一个 TeX 引擎，相对它的前辈们还相当的不完善，这里不赘述。</p><h3 id="CTeX-MiKTeX-TeX-Live"><a href="#CTeX-MiKTeX-TeX-Live" class="headerlink" title="CTeX - MiKTeX - TeX Live"></a>CTeX - MiKTeX - TeX Live</h3><p>之前介绍了 TeX, LaTeX, pdfTeX, pdfLaTeX, XeTeX, XeLaTeX, LuaTeX 等，他们都是 TeX 家族的一部分。但是作为一个能够使用的 TeX 系统，仅仅有他们还是不够的。CTeX, MiKTeX, TeX Live 都是被称为「发行」的软件合集。他们包括了上述各种引擎的可执行程序，以及一些文档类、模板、字体文件、辅助程序等等。其中 CTeX 是建立在 MiKTeX 的基础之上的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>TeX - pdfTeX - XeTeX - LuaTeX 都是排版引擎，按照先进程度递增（LuaTeX 尚未完善）。</p><p>LaTeX 是一种格式，基于 TeX 格式定义了很多更方便使用的控制命令。上述四个引擎都有对应的程序将 LaTeX 格式解释成引擎能处理的内容。</p><p>CTeX, MiKTeX, TeX Live 都是 TeX 的发行，他们是许许多多东西的集合。</p><h2 id="出现问题应当如何处理-怎样聪明地提出你的问题——怎样从这里毕业"><a href="#出现问题应当如何处理-怎样聪明地提出你的问题——怎样从这里毕业" class="headerlink" title="出现问题应当如何处理/怎样聪明地提出你的问题——怎样从这里毕业"></a>出现问题应当如何处理/怎样聪明地提出你的问题——怎样从这里毕业</h2><p>这篇文章原来的名字叫做<strong>慢慢爱上 LaTeX</strong>，后来行文的过程中发觉 LaTeX 实在是有太多的内容可以讲述，越发地没有把握让大家仅仅通过这一篇短小的文章就喜欢上 LaTeX，于是改成了现在这个名字。</p><p>限于篇幅，还有我的精力，这篇文章事实上还有许多的问题没有讲明白。它仅仅是提供了一些，在你学习使用 LaTeX 可能遇到的问题的解决方案，并不完全，而且没有教会你如何处理编译过程中可能遇到的形形色色的错误。<br>所以这最终只能是一篇小文，而不可能成为一篇正式的文档。</p><p>因此，如果通过我这篇小文，体验到了 LaTeX 带给你的一些乐趣，有了对 LaTeX 的兴趣（如果是这样，我就已经能够无比开心了~），请务必去阅读一些正式的 LaTeX 文档。</p><h3 id="去读文档"><a href="#去读文档" class="headerlink" title="去读文档"></a>去读文档</h3><p>关于 LaTeX 的文档有很多，其中有些内容过时地很快。所以有必要告诉大家，哪些文档应该看，那些文档不应该看。索性，这个问题，刘海洋(milksea)前辈已经叙述得很清楚了。前段时间，我和几个朋友，将现在看起来还未过时的文档打包上传到了我的博客。参考：<a href="https://liam.page/attachment/attachment/LaTeX-useful-tools/LaTeX_Docs_2014.zip">ZIP 归档</a>。</p><h3 id="遇到问题怎么办"><a href="#遇到问题怎么办" class="headerlink" title="遇到问题怎么办"></a>遇到问题怎么办</h3><ol><li>绝对的新手，先读完一本入门读物，了解基本的知识；</li><li>无论如何，先读文档！绝大部分问题都是文档可以解决的；</li><li>利用 Google 搜索你的问题；</li><li>在各个论坛或者 LaTeX 交流群里聪明地提出你的问题。</li></ol><p>参考：<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md">https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md</a></p><ul><li>CTeX 论坛提问版：<a href="https://github.com/CTeX-org/forum/issues">https://github.com/CTeX-org/forum/issues</a></li><li>提供一个 Telegram 交流群：<a href="https://t.me/chinesetex">https://t.me/chinesetex</a></li><li>提供一个 QQ 交流群：141877998</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tag link&quot;&gt;&lt;a class=&quot;link-card&quot; title=&quot;原文章传送门&quot; href=&quot;https://liam.page/2014/09/08/latex-introduction/&quot;&gt;&lt;div class=&quot;left&quot;&gt;&lt;img src</summary>
      
    
    
    
    <category term="生产力工具" scheme="http://wujundehuda.github.io/categories/%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="学习" scheme="http://wujundehuda.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LaTeX" scheme="http://wujundehuda.github.io/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>Unix环境高级编程第十五章-网络IPC：套接字</title>
    <link href="http://wujundehuda.github.io/2022/08/28/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E7%BD%91%E7%BB%9CIPC%EF%BC%9A%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
    <id>http://wujundehuda.github.io/2022/08/28/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E7%BD%91%E7%BB%9CIPC%EF%BC%9A%E5%A5%97%E6%8E%A5%E5%AD%97/</id>
    <published>2022-08-28T08:36:23.000Z</published>
    <updated>2022-08-28T08:37:21.549Z</updated>
    
    <content type="html"><![CDATA[<a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/WuJunDehuda/apue"><img src="https://github-readme-stats.vercel.app/api/pin/?username=WuJunDehuda&repo=apue&show_owner=true"/></a><h2 id="16-2-套接字描述符"><a href="#16-2-套接字描述符" class="headerlink" title="16.2 套接字描述符"></a>16.2 套接字描述符</h2><p> 套接字是通信端点的抽象。正如使用文件描述符访问文件，应用程序用套接字描述符访问套接字。套接字描述符在UNIX系统中被当作是一种文件描述符。</p><p>(如read和write)可以用于处理套接字描述符。</p><h3 id="创建一个套接字"><a href="#创建一个套接字" class="headerlink" title="创建一个套接字"></a>创建一个套接字</h3><h4 id="socket函数"><a href="#socket函数" class="headerlink" title="socket函数"></a>socket函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为创建一个套接字，调用socket函数。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">socket</span> <span class="params">(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若成功，返回文件(套接字)描述符;若出错，返回-1</span></span><br></pre></td></tr></table></figure><ul><li>参数domain（域）确定通信的特性，包括地址格式</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29437699/1661253463620-1ba3282f-b42e-4aa5-87ec-9335ecd6a04a.png" alt="img"></p><ul><li><p>参数type确定套接字的类型，进一步确定通信特征</p></li><li><ul><li>其中面向连接的套接字隐含了目标地址</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29437699/1661255411616-6a3c8898-1237-4c81-a795-28e6c0497dac.png" alt="img"></p><ul><li>参数protocol通常为0</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29437699/1661255468242-bc372446-eb21-4be7-ae0c-e68c315491b2.png" alt="img"></p><h3 id="关闭一个套接字"><a href="#关闭一个套接字" class="headerlink" title="关闭一个套接字"></a>关闭一个套接字</h3><h4 id="shutdown函数"><a href="#shutdown函数" class="headerlink" title="shutdown函数"></a>shutdown函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">shutdown</span> <span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> how)</span></span>;</span><br><span class="line">返回值:若成功，返回<span class="number">0</span>;若出错，返回<span class="number">-1</span></span><br></pre></td></tr></table></figure><p>如果how是SHUT, <em>RD (关闭读端)，那么无法从套接字读取数据。如果how是SHUT, WR (关闭写端)，那么无法使用套接字发送数据。如果how是SHUT</em> RDWR，则既无法读取数据，又无法发送数据。</p><p>为何不使用close关闭套接字？</p><p>当最后一个活动关闭时close才释放网络端点，而shutdown允许使一个套接字处于不活动状态。</p><h2 id="16-3-寻址"><a href="#16-3-寻址" class="headerlink" title="16.3 寻址"></a>16.3 寻址</h2><p>进程标示由两部分组成：</p><ul><li>计算机网络地址1</li><li>端口号</li></ul><h3 id="16-3-字节序"><a href="#16-3-字节序" class="headerlink" title="16.3 字节序"></a>16.3 字节序</h3><p>大小端计算机的差别，网络协议指定了字节序，因此异构计算机能够交换信息。</p><p>TCP/IP协议实用大端字节序，地址用网络字节序来表示，因此要对网络字节序和处理器字节序之间转换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/ inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">htonl</span> <span class="params">(uint32_ t hostint32)</span> </span>;</span><br><span class="line"><span class="comment">//返回值:以网络字节序表示的32位整数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint16_t</span> <span class="title">htons</span> <span class="params">(uint16_ t hostint16)</span> </span>;</span><br><span class="line"><span class="comment">//返回值:以网络字节序表示的16位整数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">ntohl</span> <span class="params">(uint32_ t netint32)</span> </span>;</span><br><span class="line"><span class="comment">//返回值:以主机字节序表示的32位整数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint16_t</span> <span class="title">ntohs</span> <span class="params">(uint16_ t netint16)</span> </span>;</span><br><span class="line"><span class="comment">//返回值:以主机字节序表示的16位整数</span></span><br></pre></td></tr></table></figure><p>h表示主机；n表示网络；s表示短；l表示长。</p><h3 id="16-3-2-地址格式"><a href="#16-3-2-地址格式" class="headerlink" title="16.3.2  地址格式"></a>16.3.2  地址格式</h3><p>一个地址标识一个特定通信域的套接字端点，地址格式与这个特定的通信域相关。为使不同格式地址能够传入到套接字函数，地址会被强制转换成一个<strong>通用的地址结构sockaddr</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr</span> &#123;</span><br><span class="line"><span class="type">sa_family_t</span>sa_ family;<span class="comment">/* address family */</span></span><br><span class="line">charsa_data[] ;<span class="comment">/* variable-length address */</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>IPV4因特网域（AF_INET4）套接字地址用结构sockaddr_in表示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">in_</span> addr &#123;</span><br><span class="line">    <span class="type">in_addr_t</span> s_ addr;<span class="comment">/* IPv4 address */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> &#123;</span><br><span class="line">    sa_ <span class="type">family_t</span> sin_family;<span class="comment">/* address family */</span></span><br><span class="line">    in_ <span class="type">port_t</span> sin_ port;<span class="comment">/* port number */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">in_</span> addr sin_ addr;<span class="comment">/* IPv4 address */</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="打印能被人理解的地址格式"><a href="#打印能被人理解的地址格式" class="headerlink" title="打印能被人理解的地址格式"></a>打印能被人理解的地址格式</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/ inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *inet_ _ntop (<span class="type">int</span> domain，<span class="type">const</span> <span class="type">void</span> *restrict addr,</span><br><span class="line">                <span class="type">char</span> *restrict str, socklen_ t size) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若成功，返回地址字符串指针;若出错，返回NULL</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> inet_ <span class="title">pton</span> <span class="params">(<span class="type">int</span> domain, <span class="type">const</span> <span class="type">char</span> * restrict str,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">void</span> *restrict addr)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若成功，返回1;若格式无效，返回0;若出错，返回-1</span></span><br></pre></td></tr></table></figure><p>函数inet_ntop将网络字节序的二进制转换成文本自负格式；函数inet_pton将文本字符串转换成网络字节序的二进制地址。</p><ul><li>参数domain仅支持两个值：AF_INET和AF_INET6</li><li><p>参数size指定保存文本字符串的缓冲区的大小。</p></li><li><ul><li>INET_ADDRSTRLEN定义了足够大的空间来存放IPV4地址的文本串。</li><li>INET_ADDRSTRLEN6定义了足够大的空间来存放IPV6地址的文本串。</li></ul></li></ul><h3 id="16-3-3-地址查询"><a href="#16-3-3-地址查询" class="headerlink" title="16.3.3 地址查询"></a>16.3.3 地址查询</h3><p>函数返回的网络配置信息被存放在许多地方。这个信息可以存放在静态文件(如/etc/hosts和/etc/services)中，也可以由名字服务管理，如域名系统(Domain Name System，DNS)或者网络信息服务(Network Information Service，NIS)。 无论这个信息放在何处，都可以用同样的函数访问它。</p><p>通过调用gethostent，可以找到给定计算机系统的主机信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hostent</span> *<span class="built_in">gethostent</span> (<span class="type">void</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若成功，返回指针:若出错，返回NULL</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sethostent</span> <span class="params">(<span class="type">int</span> stayopen)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">endhostent</span> <span class="params">(<span class="type">void</span>)</span> </span>;</span><br></pre></td></tr></table></figure><p>当gethostent返回时候，会得到一个指向hostent结构的指针，hostent结构中至少包含以下成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">hostent</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="type">char</span> *h_ name;<span class="comment">/* name of host */</span></span><br><span class="line">    </span><br><span class="line"><span class="type">char</span> **h_ aliases;<span class="comment">/*pointer to alternate host name array */</span></span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> h_ addrtype;<span class="comment">/* address type */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h_ length;<span class="comment">/* length in bytes of address */</span></span><br><span class="line">    </span><br><span class="line"><span class="type">char</span> **h_ addr_ list;<span class="comment">/* pointer to array of network addresses * /</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;;</span></span><br></pre></td></tr></table></figure><p>……</p><h4 id="16-9-c"><a href="#16-9-c" class="headerlink" title="16-9.c"></a>16-9.c</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./a.out github.com <span class="number">80</span></span><br><span class="line">    </span><br><span class="line">flags canon family inet type stream protocol TCP</span><br><span class="line">host github.com address <span class="number">20.205</span><span class="number">.243</span><span class="number">.166</span> port <span class="number">80</span></span><br><span class="line">flags canon family inet type datagram protocol UDP</span><br><span class="line">host - address <span class="number">20.205</span><span class="number">.243</span><span class="number">.166</span> port <span class="number">80</span></span><br><span class="line">flags canon family inet type raw protocol <span class="keyword">default</span></span><br><span class="line">host - address <span class="number">20.205</span><span class="number">.243</span><span class="number">.166</span> port <span class="number">80</span></span><br></pre></td></tr></table></figure><h3 id="16-3-4-将套接字与地址关联"><a href="#16-3-4-将套接字与地址关联" class="headerlink" title="16.3.4 将套接字与地址关联"></a>16.3.4 将套接字与地址关联</h3><p>服务器保留四个地址并注册在/etc/services ho hove某个名字服务中。</p><h4 id="bind函数"><a href="#bind函数" class="headerlink" title="bind函数"></a>bind函数</h4><p>使用bin的函数来关联地址和套接字：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bind</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr, socklen_ t len)</span> </span>;</span><br><span class="line"></span><br><span class="line">返回值:若成功，返回<span class="number">0</span>;若出错，返回<span class="number">-1</span></span><br></pre></td></tr></table></figure><p>对于使用的地址有以下—些限制。</p><ul><li>在进程正在运行的计算机上，指定的地址必须有效;不能指定一个其他机器的地址。</li><li>地址必须和创建套接字时的地址族所支持的格式相匹配。</li><li>地址中的端口号必须不小于1024，除非该进程具有相应的特权(即超级用户)。</li><li>一般只能将一个套接字端点绑定到一个给定地址.上，尽管有些协议允许多重绑定。</li></ul><p>对于因特网域，如果指定IP地址为INADDR_ ANY (<netinet/in.h>中定义的)，套接字端点可以被绑定到所有的系统网络接口上。这意味着可以接收这个系统所安装的任何-个网卡的数据包。</p><h4 id="getsockname函数"><a href="#getsockname函数" class="headerlink" title="getsockname函数"></a>getsockname函数</h4><p>可以调用getsockname函数来发现绑定到套接字上的地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsockname</span> <span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *restrict addr,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">socklen_t</span> *restrict alenp)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若成功，返回0;若出错，返回-1</span></span><br></pre></td></tr></table></figure><p>若套接字已经和对等方连接，可以调用getpeerrname函数来查找对方的地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getpeername</span> <span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *restrict addr,</span></span></span><br><span class="line"><span class="params"><span class="function">                socklen_ <span class="type">_t</span> *restrict alenp)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若成功，返回0;若出错，返回-1</span></span><br></pre></td></tr></table></figure><ul><li>参数alenp设置为一个指向整数的指针，盖整数指定缓冲区sockaddr的长度</li></ul><h2 id="16-4-建立连接"><a href="#16-4-建立连接" class="headerlink" title="16.4 建立连接"></a>16.4 建立连接</h2><p>在请求服务的进程套接字和提供服务的进程套接字使用connect函数建立连接：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">connect</span> <span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr,<span class="type">socklen_t</span> len)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若成功，返回0:若出错，返回-1</span></span><br></pre></td></tr></table></figure><ul><li>在connect中指定的地址是我们想与之通信的服务器地址。</li></ul><h4 id="指数补偿算法connect"><a href="#指数补偿算法connect" class="headerlink" title="指数补偿算法connect"></a>指数补偿算法connect</h4><p>&lt;&lt;=n</p><h4 id="listen函数"><a href="#listen函数" class="headerlink" title="listen函数"></a>listen函数</h4><p>服务器调用listen函数来宣告它接受连接请求：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">listen</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> backlog)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若成功，返回0:若出错，返回-1</span></span><br></pre></td></tr></table></figure><ul><li>参数backlog提示该系统所要入队的未完成连接请求数量</li></ul><h4 id="accept函数"><a href="#accept函数" class="headerlink" title="accept函数"></a>accept函数</h4><p>使用accept函数获得连接请求并建立连接：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">accept</span> <span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *restrict addr,</span></span></span><br><span class="line"><span class="params"><span class="function">            socklen_ t *restrict len)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若成功，返回文件(套接字)描述符;若出错，返回-1</span></span><br></pre></td></tr></table></figure><ul><li>函数accept返回的文件描述符是套接字描述符，该描述符连接到调用connect的客户端，传给accept的原始套接字没有关联到这个连接，而是继续保持可用状态并接收其他连接请求。</li></ul><h4 id="16-12-初始化一个套接字供服务器进程使用"><a href="#16-12-初始化一个套接字供服务器进程使用" class="headerlink" title="16-12 初始化一个套接字供服务器进程使用"></a>16-12 初始化一个套接字供服务器进程使用</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fd;<span class="comment">//套接字描述符</span></span><br><span class="line"><span class="type">int</span> err = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((fd = <span class="built_in">socket</span> (addr-&gt;sa_family, type, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">-1</span>) ;</span><br><span class="line"><span class="comment">//as_famile 套接字域  type套接字种类（面向连接or no）    value 3 协议，使用0为默认</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">bind</span>(fd, addr, alen) &lt; O)</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line"><span class="comment">//将套接字fd绑定到指定地址addr上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(type == SOCK_ STREAMII type == SOCK_ SEQPACKET)l</span><br><span class="line"><span class="comment">//如果为面向连接的套接字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">listen</span>(fd, qlen) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line"><span class="comment">//宣布该套接字开始接受请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>(fd) ;</span><br></pre></td></tr></table></figure><h2 id="16-5-数据传输"><a href="#16-5-数据传输" class="headerlink" title="16.5 数据传输"></a>16.5 数据传输</h2><p>一个套接字端点表示为一个文件描述符，只要建立连接，就可以使用write和read来通过套接字通信，还可以安排套接字描述符进行多进程操作。</p><p>如果想指定选项，从多个客户端接收数据包，发送带外数据，需要使用6个为数据传递设计的套接字函数。</p><h4 id="send函数"><a href="#send函数" class="headerlink" title="send函数"></a>send函数</h4><p>send函数可以指定标志来改变处理传输数据的方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">send</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span> *buf, size. <span class="type">_t</span> nbytes, <span class="type">int</span> flags)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若成功，返回发送的字节数:若出错，返回-1</span></span><br></pre></td></tr></table></figure><ul><li>使用send函数是套接字必须已经连接</li><li>参数buf和nbytes的含义与write函数中的一致</li><li>参数flags</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29437699/1661653147809-af2bec7c-921e-4039-8490-ddd9670ca2b0.png" alt="img"></p><p><strong>send成功返回时标不代表连接的另一端的进程一定接收了数据，只能保证数据已被无错误发送到网络驱动程序上</strong></p><h4 id="sendto函数"><a href="#sendto函数" class="headerlink" title="sendto函数"></a>sendto函数</h4><p>sendto函数与send函数类似，区别是sendto函数可以在无连接的套接字上指定一个目标地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">sendto</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> nbytes, <span class="type">int</span> flags,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">const</span> <span class="keyword">struct</span> sockaddr * destaddr, <span class="type">socklen_t</span> destlen)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若成功，返回发送的字节数;若出错，返回-1</span></span><br></pre></td></tr></table></figure><p>对于无连接的套接字，需要调用connect设置目标地址，否则不能使用send。</p><h4 id="sendmsg函数"><a href="#sendmsg函数" class="headerlink" title="sendmsg函数"></a>sendmsg函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ssize_ t <span class="title">sendto</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> nbytes, <span class="type">int</span> flags,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">const</span> <span class="keyword">struct</span> sockaddr * destaddr, <span class="type">socklen_t</span> destlen)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若成功，返回发送的字节数;若出错，返回-1</span></span><br></pre></td></tr></table></figure><p>msghdr结构至少有以下成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">msghdr</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="type">void</span> *msg_name ;<span class="comment">/* optional address */</span></span><br><span class="line">    </span><br><span class="line"><span class="type">socklen_t</span> msg_namelen; <span class="comment">/* address size in bytes */</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iovec</span> *msg_ ov;<span class="comment">/* array of I/O buffers */</span></span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> msg_iovlen;<span class="comment">/* number of elements in array */</span></span><br><span class="line">    </span><br><span class="line"><span class="type">void</span> *msg_control ;<span class="comment">/* ancillary data */</span></span><br><span class="line">    </span><br><span class="line"><span class="type">socklen_t</span> msg_controllen; <span class="comment">/* number of ancillary bytes * /</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int msg_ flags;/* flags for received message * /</span></span><br><span class="line"><span class="comment">    .</span></span><br><span class="line"><span class="comment">    .</span></span><br><span class="line"><span class="comment">    .</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br></pre></td></tr></table></figure><h4 id="函数recv"><a href="#函数recv" class="headerlink" title="函数recv"></a>函数recv</h4><h4 id="函数recvfrom"><a href="#函数recvfrom" class="headerlink" title="函数recvfrom"></a>函数recvfrom</h4><h4 id="函数recvmsg"><a href="#函数recvmsg" class="headerlink" title="函数recvmsg"></a>函数recvmsg</h4><p>pass了一些面向连接和无连接的套接字服务端和客户端程序</p><h4 id="16-16-amp-amp-16-17"><a href="#16-16-amp-amp-16-17" class="headerlink" title="16-16 &amp;&amp; 16-17"></a>16-16 &amp;&amp; 16-17</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/services</span><br><span class="line"></span><br><span class="line">## 在该文件最后追加</span><br><span class="line"></span><br><span class="line"># Local services</span><br><span class="line">ruptime         <span class="number">6666</span>/tcp</span><br></pre></td></tr></table></figure><p>alarm也称为闹钟函数，它可以再进程中设置一个定时器，当定时器指定的时间到时，它向进城发送SIGALARM信号。要注意的是，一个进程只能有一个闹钟时间，如果在调用alarm之前已设置过闹钟时间，则任何以前的闹钟时间都被新值所代替。</p><h2 id="16-6-套接字选项"><a href="#16-6-套接字选项" class="headerlink" title="16.6 套接字选项"></a>16.6 套接字选项</h2><h2 id="16-7-带外数据"><a href="#16-7-带外数据" class="headerlink" title="16.7 带外数据"></a>16.7 带外数据</h2><p>带外数据(out-of-banddata)是一些通信协议所支持的可选功能，与普通数据相比，它允许更高优先级的数据传输。带外数据先行传输，即使传输队列已经有数据。TCP支持带外数据，但是UDP不支持。套接字接口对带外数据的支持很大程度上受TCP带外数据具体实现的影响。</p><h2 id="16-8-非阻塞和异步I-O"><a href="#16-8-非阻塞和异步I-O" class="headerlink" title="16.8 非阻塞和异步I/O"></a>16.8 非阻塞和异步I/O</h2><p>recv函数没有数据可用时会阻塞等待；套接字输出队列没有足够空间发送消息时send函数会阻塞。</p><p>套接字的异步I/O被称为基于信号的I/O。</p><p>fcntl函数与ioctl函数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;a class=&quot;ghcard&quot; rel=&quot;external nofollow noopener noreferrer&quot; href=&quot;https://github.com/WuJunDehuda/apue&quot;&gt;&lt;img src=&quot;https://github-readme-sta</summary>
      
    
    
    
    <category term="Unix环境高级编程" scheme="http://wujundehuda.github.io/categories/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
    <category term="学习" scheme="http://wujundehuda.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>世界上最好的编译器-Vim</title>
    <link href="http://wujundehuda.github.io/2022/08/24/%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E5%A5%BD%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8-Vim/"/>
    <id>http://wujundehuda.github.io/2022/08/24/%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E5%A5%BD%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8-Vim/</id>
    <published>2022-08-24T07:28:58.000Z</published>
    <updated>2022-08-24T07:28:58.370Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络第二章-应用层</title>
    <link href="http://wujundehuda.github.io/2022/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>http://wujundehuda.github.io/2022/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%BA%94%E7%94%A8%E5%B1%82/</id>
    <published>2022-08-14T01:36:30.000Z</published>
    <updated>2022-08-14T01:44:12.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-1-应用层协议原理"><a href="#2-1-应用层协议原理" class="headerlink" title="2.1 应用层协议原理"></a>2.1 应用层协议原理</h2><h3 id="2-1-1-体系结构"><a href="#2-1-1-体系结构" class="headerlink" title="2.1.1 体系结构"></a>2.1.1 体系结构</h3><ul><li>客户-服务器</li><li>P2P</li></ul><h3 id="2-1-2-进程通信"><a href="#2-1-2-进程通信" class="headerlink" title="2.1.2 进程通信"></a>2.1.2 进程通信</h3><h4 id="1-进程与计算机网络之间的接口-套接字"><a href="#1-进程与计算机网络之间的接口-套接字" class="headerlink" title="1.进程与计算机网络之间的接口-套接字"></a>1.进程与计算机网络之间的接口-套接字</h4><p>连接应用层与运输层，可选择：运输层协议、运输层参数</p><h4 id="2-进程寻址"><a href="#2-进程寻址" class="headerlink" title="2.进程寻址"></a>2.进程寻址</h4><ul><li>IP地址</li><li>端口</li></ul><h3 id="2-1-3-🉑️供应用程序使用的运输服务"><a href="#2-1-3-🉑️供应用程序使用的运输服务" class="headerlink" title="2.1.3 🉑️供应用程序使用的运输服务"></a>2.1.3 🉑️供应用程序使用的运输服务</h3><ol><li>可靠数据传输</li><li>吞吐量-带宽敏感的应用</li><li>定时-网络时延</li><li>安全性</li></ol><h3 id="2-1-4-因特网提供的运输服务"><a href="#2-1-4-因特网提供的运输服务" class="headerlink" title="2.1.4 因特网提供的运输服务"></a>2.1.4 因特网提供的运输服务</h3><h4 id="1-TCP服务"><a href="#1-TCP服务" class="headerlink" title="1.TCP服务"></a>1.TCP服务</h4><p>TCP服务包括面向连接服务和可靠数据传输服务。</p><ul><li>面向连接服务</li><li>可靠数据传输服务</li><li>拥塞控制机制</li></ul><p>TCP安全</p><p>安全套接字层（Secure Sockets Layer，SSL）是TCP的增强版</p><h4 id="2-UDP服务"><a href="#2-UDP服务" class="headerlink" title="2.UDP服务"></a>2.UDP服务</h4><p>不提供不必要服务的轻量级运输协议。</p><h3 id="2-1-5-应用层协议"><a href="#2-1-5-应用层协议" class="headerlink" title="2.1.5 应用层协议"></a>2.1.5 应用层协议</h3><ul><li>交换的报文类型</li><li>各种报文类型的语法</li><li>字段的语意</li><li>确定一个进程何时如何发送报文</li></ul><h2 id="2-2-Web和HTTP"><a href="#2-2-Web和HTTP" class="headerlink" title="2.2 Web和HTTP"></a>2.2 Web和HTTP</h2><h2 id="2-2-1-HTTP概况"><a href="#2-2-1-HTTP概况" class="headerlink" title="2.2.1 HTTP概况"></a>2.2.1 HTTP概况</h2><h4 id="Web页面"><a href="#Web页面" class="headerlink" title="Web页面"></a>Web页面</h4><p>由<strong>对象</strong>组成，一个对象知识一个诸如HTML文件、一张图片</p><ul><li>HTTP使用TCp传输协议</li><li>HTTP是一个无状态协议（不保存关于客户的任何信息）</li></ul><h3 id="2-2-2-非持续连接和持续连接"><a href="#2-2-2-非持续连接和持续连接" class="headerlink" title="2.2.2 非持续连接和持续连接"></a>2.2.2 非持续连接和持续连接</h3><p>当客户发出一系列请求时</p><ul><li>每个请求使用单独的TCP连接-非持续性</li></ul><p>对于每个对象都要重新连接</p><p>同时打开多个TCP连接，并行服务</p><ul><li>每个请求使用相同的TCP连接-持续性</li></ul><p>超过时间间隔未请求则关闭</p><h3 id="2-2-3-HTTP报文格式"><a href="#2-2-3-HTTP报文格式" class="headerlink" title="2.2.3 HTTP报文格式"></a>2.2.3 HTTP报文格式</h3><h4 id="1-HTTP请求报文"><a href="#1-HTTP请求报文" class="headerlink" title="1.HTTP请求报文"></a>1.HTTP请求报文</h4><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1659492638535-7926b2df-7e41-4f6c-826d-26c54d0af8a2.png" alt="img"></p><p>第一行为请求行，后继为首部行</p><h5 id="请求行："><a href="#请求行：" class="headerlink" title="请求行："></a>请求行：</h5><ul><li>方法字段</li></ul><p>GET、POST、HEAD、PUT、DELETE</p><ul><li>URL字段</li><li>HTTP版本字段</li></ul><h5 id="首部行："><a href="#首部行：" class="headerlink" title="首部行："></a>首部行：</h5><ul><li>HOST 指明了对象所在的主机</li><li>Connection：close 告诉服务器不使用持续连接</li><li>User-agent指明用户代理</li></ul><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1659493394800-67360a48-caf1-468c-a888-aebcaac4e010.png" alt="img"></p><p>使用GET时，实体主体为空；使用POST时，实体主体中包含用户在表单中的输入值。</p><ul><li>HEAD 返回响应</li><li>PUT 向服务器上传内容</li><li>DELETE 删除服务器上的对象</li></ul><h4 id="2-HTTP响应报文"><a href="#2-HTTP响应报文" class="headerlink" title="2.HTTP响应报文"></a>2.HTTP响应报文</h4><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1659493668308-ef74baa9-73f5-4c9f-ad00-770ad401431f.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1659493761097-58eb3977-0e00-4cf1-bef2-190c88d0202f.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1659493779799-9535149c-b148-4306-98bf-22971adafca7.png" alt="img"></p><h4 id="一个小实验"><a href="#一个小实验" class="headerlink" title="一个小实验"></a>一个小实验</h4><p>talent通过TCP/IP协议簇来访问远程终端，传输的数据和口令是明文形式，访问22端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">telnet gaia.cs.umass.edu 80</span><br><span class="line">GET /kurose_ross/interactive/index.php HTTP/1.1</span><br><span class="line">Host: gaia.cs.umass.edu</span><br><span class="line"></span><br><span class="line">获取的报文响应</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Wed, 03 Aug 2022 02:34:45 GMT</span><br><span class="line">Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.30 mod_perl/2.0.11 Perl/v5.16.3</span><br><span class="line">X-Powered-By: PHP/7.4.30</span><br><span class="line">Set-Cookie: DevMode=0</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure><h3 id="2-2-4-用户与服务器的交互：cookie"><a href="#2-2-4-用户与服务器的交互：cookie" class="headerlink" title="2.2.4 用户与服务器的交互：cookie"></a>2.2.4 用户与服务器的交互：cookie</h3><ul><li>服务器响应报文cookie</li><li>请求报文cookie</li><li>浏览器保存的cookie</li><li>服务器数据库保存的cookie</li></ul><h3 id="2-2-5-Web缓存"><a href="#2-2-5-Web缓存" class="headerlink" title="2.2.5 Web缓存"></a>2.2.5 Web缓存</h3><p>就很字面的意思，可以与CDN（内容分发网络）结合。</p><h3 id="2-2-4-条件GET"><a href="#2-2-4-条件GET" class="headerlink" title="2.2.4 条件GET"></a>2.2.4 条件GET</h3><p>查看最后修改时间，与Web缓存配合。</p><h2 id="2-3-因特网中的电子邮件"><a href="#2-3-因特网中的电子邮件" class="headerlink" title="2.3 因特网中的电子邮件"></a>2.3 因特网中的电子邮件</h2><h2 id="2-4-DNS-互联网的目录服务"><a href="#2-4-DNS-互联网的目录服务" class="headerlink" title="2.4 DNS:互联网的目录服务"></a>2.4 DNS:互联网的目录服务</h2><h3 id="2-4-1-DNS提供的服务"><a href="#2-4-1-DNS提供的服务" class="headerlink" title="2.4.1 DNS提供的服务"></a>2.4.1 DNS提供的服务</h3><p>DNS是：</p><ul><li>一个由分层的DNS服务器实现的分布式数据库</li><li>一个使得主机能够查询分布式数据库的应用层协议</li><li>运行在UDP上</li></ul><p>DNS的服务：</p><ul><li>主机名到IP地址转化</li><li>主机别名</li><li>负载分配</li></ul><h3 id="2-4-2-DNS工作机理概述"><a href="#2-4-2-DNS工作机理概述" class="headerlink" title="2.4.2 DNS工作机理概述"></a>2.4.2 DNS工作机理概述</h3><h4 id="1-分布式、层次数据库"><a href="#1-分布式、层次数据库" class="headerlink" title="1.分布式、层次数据库"></a>1.分布式、层次数据库</h4><ul><li>根DNS服务器</li><li>顶级域服务器（com、edu）</li><li>权威DNS服务器</li><li>本地DNS服务器（属于当地的ISP）</li></ul><h4 id="2-DNS缓存"><a href="#2-DNS缓存" class="headerlink" title="2.DNS缓存"></a>2.DNS缓存</h4><h2 id="2-5-P2P文件分发"><a href="#2-5-P2P文件分发" class="headerlink" title="2.5 P2P文件分发"></a>2.5 P2P文件分发</h2><h2 id="2-7-套接字编程：生成网络应用"><a href="#2-7-套接字编程：生成网络应用" class="headerlink" title="2.7 套接字编程：生成网络应用"></a>2.7 套接字编程：生成网络应用</h2><h2 id=""><a href="#" class="headerlink" title="#"></a>#</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2-1-应用层协议原理&quot;&gt;&lt;a href=&quot;#2-1-应用层协议原理&quot; class=&quot;headerlink&quot; title=&quot;2.1 应用层协议原理&quot;&gt;&lt;/a&gt;2.1 应用层协议原理&lt;/h2&gt;&lt;h3 id=&quot;2-1-1-体系结构&quot;&gt;&lt;a href=&quot;#2-1-1-体</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://wujundehuda.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="学习" scheme="http://wujundehuda.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机网络" scheme="http://wujundehuda.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>和小苏的恋爱周记-1</title>
    <link href="http://wujundehuda.github.io/2022/08/13/%E5%B0%8F%E8%8B%8F%E7%9A%84%E6%81%8B%E7%88%B1%E6%97%A5%E8%AE%B0-1/"/>
    <id>http://wujundehuda.github.io/2022/08/13/%E5%B0%8F%E8%8B%8F%E7%9A%84%E6%81%8B%E7%88%B1%E6%97%A5%E8%AE%B0-1/</id>
    <published>2022-08-13T14:04:27.000Z</published>
    <updated>2022-08-13T15:29:26.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>现在是晚上22.11分，刚刚开完组会准备给小苏写上周六心血来潮提出的恋爱周记。</p><p>想着这日子过得好快，离我见到小苏已经过了一个月零二天，离我和小苏重新开始异地恋还有6天10个小时。相聚的时光总是美好而又短暂的，除了某些一辈子都不会忘掉的瞬间，大部分美好的记忆总是美好但又转瞬即逝的。</p><p>当我要翻相册来回忆这周干了啥的时候，我就知道有写点什么的必要了</p><hr><h2 id="二、正文"><a href="#二、正文" class="headerlink" title="二、正文"></a>二、正文</h2><p>这周事情好多呀，又是赶各种ddl，又是安排同学团建什么的，花在小苏身上的时间有所下降。更是因为我个人的问题，在和小苏出去玩的时候一直在玩手机惹小苏生气了。不过我知错能改，隔天就和小苏度过了愉快的一个晚上，一起去江边吹风、一人抱着一台笔记本坐在桥边学习、第一次一起去吃了啊霞刨冰…</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660402751592-e2c8dee8-0586-4225-99e2-0ed41e118559.jpeg" alt="img"><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660402761401-5e242226-e11e-444c-9a8b-27170af7bdef.jpeg" alt="img"></p><p>和小苏在一起真的好开心，从一开始高三的热恋期，到大学异地的冷淡期天天吵架、到现在的算是平淡但又很甜的平淡期，能和小苏一起克服重重困难就坚持到现在，更让我坚信了小苏就是我命中注定的那个人（我赖上你了）。在磨合的过程中经历了很多事情，我们也都为彼此改变了很多，恋爱中吵架是必然的事，我一直相信只有把架给吵明白了，感情才会长久。</p><h2 id="三、代办事项"><a href="#三、代办事项" class="headerlink" title="三、代办事项"></a>三、代办事项</h2><div class='checkbox red'><input type="checkbox" />            <p>拍一套头像</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>给小苏包礼物</p>            </div><div class='checkbox blus'><input type="checkbox" />            <p>帮小苏搭博客</p>            </div><h2 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h2><p>第一次写这种记录性的文字，时间也比较匆忙，而且还是发表在博客上，很期待等下小苏在博客上看到这篇文章时的感受哈。以后要坚持一周一更，记录与小苏的恋爱日常，保存这一段美好的回忆！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;现在是晚上22.11分，刚刚开完组会准备给小苏写上周六心血来潮提出的恋爱周记。&lt;/p&gt;
&lt;p&gt;想着这日子过得好快，离我见到小</summary>
      
    
    
    
    <category term="恋爱周记" scheme="http://wujundehuda.github.io/categories/%E6%81%8B%E7%88%B1%E5%91%A8%E8%AE%B0/"/>
    
    
    <category term="恋爱" scheme="http://wujundehuda.github.io/tags/%E6%81%8B%E7%88%B1/"/>
    
    <category term="生活" scheme="http://wujundehuda.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Unix环境高级编程第十五章-进程间通信</title>
    <link href="http://wujundehuda.github.io/2022/08/13/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>http://wujundehuda.github.io/2022/08/13/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</id>
    <published>2022-08-13T13:03:31.000Z</published>
    <updated>2022-08-14T01:43:46.918Z</updated>
    
    <content type="html"><![CDATA[<a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/WuJunDehuda/apue"><img src="https://github-readme-stats.vercel.app/api/pin/?username=WuJunDehuda&repo=apue&show_owner=true"/></a><ul><li>管道</li><li>FIFO</li><li>消息队列</li><li>信号量</li><li>共享存储</li></ul><h2 id="15-2-管道"><a href="#15-2-管道" class="headerlink" title="15.2 管道"></a>15.2 管道</h2><h3 id="15-2-1-管道简介："><a href="#15-2-1-管道简介：" class="headerlink" title="15.2.1 管道简介："></a>15.2.1 管道简介：</h3><p><a href="https://zhuanlan.zhihu.com/p/548003903">https://zhuanlan.zhihu.com/p/548003903</a></p><p>半双工管道：数据只能在同个方向流动</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 管道是通过调用pipe函数创建的</span></span><br><span class="line"></span><br><span class="line">include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pipe</span><span class="params">(<span class="type">int</span> fd[<span class="number">2</span>])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值:若成功,返回0。若出错,返回-1</span></span><br></pre></td></tr></table></figure><p>经由参数fd 返回两个文件描述符: </p><ul><li>fd[0]为读而打开</li><li>fd[1]为写而打开</li><li>fd[1]的输出是fa(0]的输入</li></ul><p>强调数据通过内核在管道中流动，可以使用read和write进行读写。</p><p><strong>管道不是一种普通的文件，它属于一种独特的文件系统：pipefs。管道的本质是内核维护了一块缓冲区与管道文件相关联，对管道文件的操作，被内核转换成对这块缓冲区内存的操作</strong>。</p><p>管道为空read调用会阻塞</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660048985257-5bd66132-70f8-4d91-85de-083e1bcbc70c.png" alt="img"></p><h4 id="管道的性质："><a href="#管道的性质：" class="headerlink" title="管道的性质："></a>管道的性质：</h4><ul><li>只有当所有的写入端描述符都已经关闭了，而且管道中的数据都被读出，对读取描述符调用read函数才返回0（及读到EOF标志）。</li><li>如果所有的读取端描述符都已经关闭了，此时进程再次往管道里面写入数据，写操作将会失败，并且内核会像进程发送一个SIGPIPE信号(默认杀死进程)。</li><li>当所有的读端与写端都已经关闭时，管道才会关闭.</li><li><strong>就因为有这些特性，我们要即使关闭没用的管道文件描述符</strong></li></ul><h4 id="shell管道的实现"><a href="#shell管道的实现" class="headerlink" title="shell管道的实现"></a>shell管道的实现</h4><p>使用dup2将标准输出重定向到管道中<img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660395586001-3a78358b-49e6-46bf-91f0-8c2d688d23c8.png" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(pipefd[<span class="number">1</span>] != STDOUT_FILENO)&#123;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">dup2</span>(pipefd[<span class="number">1</span>],STDOUT_FILENO);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">close</span>(pipefd[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15-2-3-实例"><a href="#15-2-3-实例" class="headerlink" title="15.2.3 实例"></a>15.2.3 实例</h3><h4 id="实现通过管道进程间通信：15-2-c"><a href="#实现通过管道进程间通信：15-2-c" class="headerlink" title="实现通过管道进程间通信：15.2.c"></a>实现通过管道进程间通信：15.2.c</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将管道描述符复制到标准输入输出上</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660394993596-9f61d2cf-bbf0-4fd7-ae6c-80ff533466bd.png" alt="img"></p><p><strong>fork的进程共享文件描述符</strong></p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660395005424-e9e41deb-018c-4469-b29a-50cfcd249012.png" alt="img"></p><p><strong>关闭父进程的读描述符与子进程的写描述符</strong></p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660395019108-6edf3aa3-ccd7-409a-9507-3407771f5b08.png" alt="img"></p><h4 id="实现了用管道调用分页：15-2-2-c"><a href="#实现了用管道调用分页：15-2-2-c" class="headerlink" title="实现了用管道调用分页：15.2.2.c"></a>实现了用管道调用分页：15.2.2.c</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./a.out</span><br><span class="line">usage: a.out &lt;pathname&gt;</span><br></pre></td></tr></table></figure><h4 id="实现8-9中的TELL-WAIT、TELL-PARENT、TELL-CHILD、WAIT-PARENT、WAIT-CHILD实现进程同步"><a href="#实现8-9中的TELL-WAIT、TELL-PARENT、TELL-CHILD、WAIT-PARENT、WAIT-CHILD实现进程同步" class="headerlink" title="实现8.9中的TELL_WAIT、TELL_PARENT、TELL_CHILD、WAIT_PARENT、WAIT_CHILD实现进程同步"></a>实现8.9中的TELL_WAIT、TELL_PARENT、TELL_CHILD、WAIT_PARENT、WAIT_CHILD实现进程同步</h4><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660351575910-347d30dc-33cb-47c9-8e98-6ec0b8ecbb4f.png" alt="img"></p><h2 id="15-3-函数popen和pclose"><a href="#15-3-函数popen和pclose" class="headerlink" title="15.3 函数popen和pclose"></a>15.3 函数popen和pclose</h2><p>标准IO库提供了两个函数popen和pclose.这两个函数实现的操作是:创建一个管道，fork一个子进程，关闭未使用的管道端，执行一个shell运行命令，然后等待命令终止。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">FILE *<span class="title">popen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cmdstring， <span class="type">const</span> <span class="type">char</span> *type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值:若成功,返回文件指针;若出错,返回NULL</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pclose</span><span class="params">(FILE *fp)</span></span>;</span><br><span class="line"></span><br><span class="line">返回值:若成功,返回cmdstring的终止状态;若出错,返回<span class="number">-1</span></span><br></pre></td></tr></table></figure><p>函数popen先执行fork,然后调用exec执行cmdstring,并且返回一个标准I/O文件指针。</p><p>type的选择:</p><ul><li>r  打开一个可读的文件指针</li><li>w 打开一个可写的文件指针</li></ul><h4 id="！实例：自己实现popen与pclose"><a href="#！实例：自己实现popen与pclose" class="headerlink" title="！实例：自己实现popen与pclose"></a>！实例：自己实现popen与pclose</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;a class=&quot;ghcard&quot; rel=&quot;external nofollow noopener noreferrer&quot; href=&quot;https://github.com/WuJunDehuda/apue&quot;&gt;&lt;img src=&quot;https://github-readme-sta</summary>
      
    
    
    
    <category term="Unix环境高级编程" scheme="http://wujundehuda.github.io/categories/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
    <category term="学习" scheme="http://wujundehuda.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Unix环境高级编程第八章-进程控制</title>
    <link href="http://wujundehuda.github.io/2022/08/12/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E5%85%AB%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://wujundehuda.github.io/2022/08/12/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E5%85%AB%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2022-08-12T03:12:21.000Z</published>
    <updated>2022-08-14T01:44:10.953Z</updated>
    
    <content type="html"><![CDATA[<a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/WuJunDehuda/apue"><img src="https://github-readme-stats.vercel.app/api/pin/?username=WuJunDehuda&repo=apue&show_owner=true"/></a><h2 id="8-2-进程标识"><a href="#8-2-进程标识" class="headerlink" title="8.2 进程标识"></a>8.2 进程标识</h2><p>每个进程都有一个非负整型表示唯一的进程ID。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列函数返回进程的一些其他标识符</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">getpid</span><span class="params">(<span class="type">void</span>)</span></span>;<span class="comment">//返回值：调用进程的进程ID</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">getppid</span><span class="params">(<span class="type">void</span>)</span></span>;<span class="comment">//返回值：调用进程的父进程ID</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">upid_t</span> <span class="title">getpid</span><span class="params">(<span class="type">void</span>)</span></span>;<span class="comment">//返回值：调用进程的实际用户ID</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">gpid_t</span> <span class="title">getpid</span><span class="params">(<span class="type">void</span>)</span></span>;<span class="comment">//返回值：调用进程的实际组ID</span></span><br></pre></td></tr></table></figure><h2 id="8-3-函数fork"><a href="#8-3-函数fork" class="headerlink" title="8.3 函数fork"></a>8.3 函数fork</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个现有的进程可以调用fork函数创建一个新进程</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">fork</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="comment">//返回值：子进程返回0，父进程返回子进程ID；若出错，返回-1</span></span><br></pre></td></tr></table></figure><p>子进程是父进程的副本，但并不共享存储空间。父进程和子进程共享正文段。</p><p>很多时候子进程并不执行父进程的完全副本，而是使用了写时复制（COW）技术，由父进程与子进程共享数据区域，由内核将他们的权限改变为只读，当需要修改时再复制一份副本。</p><h4 id="8-3-c"><a href="#8-3-c" class="headerlink" title="8.3.c"></a>8.3.c</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ gcc <span class="number">8.3</span>.c -lapue</span><br><span class="line">$ ./a.out </span><br><span class="line">a write to stdout</span><br><span class="line">before fork</span><br><span class="line">pid = <span class="number">11998</span>, glob = <span class="number">7</span>, var = <span class="number">89</span></span><br><span class="line">pid = <span class="number">11997</span>, glob = <span class="number">6</span>, var = <span class="number">88</span></span><br><span class="line">$ ./a.out &gt; temp.out</span><br><span class="line">$ cat temp.out </span><br><span class="line">a write to stdout</span><br><span class="line">before fork</span><br><span class="line">pid = <span class="number">12021</span>, glob = <span class="number">7</span>, var = <span class="number">89</span></span><br><span class="line">before fork</span><br><span class="line">pid = <span class="number">12020</span>, glob = <span class="number">6</span>, var = <span class="number">88</span></span><br></pre></td></tr></table></figure><p>当输出到终端时stdout是行缓冲，输出到文件时是全缓冲。</p><p>全缓冲。输入或输出缓冲区被填满，会进行实际 I/O 操作。其他情况，如强制刷新、进程结束也会进行实际I/O操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">write</span>(STDOUT_FILENO, buf, <span class="built_in">sizeof</span>(buf)) != <span class="built_in">sizeof</span>(buf))</span><br></pre></td></tr></table></figure><p>sizeof(buf)-1忽略了buf末尾的null，因此 “a write to stdout\n” 留在了缓冲区中。</p><p>buf直接写入标准输出，不受缓冲区影响。</p><p>printf(“before fork\n”)在输出到文件时未flush缓冲区，在fork的过程中复制了缓冲区，因此输出了两次。</p><h4 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h4><p>父进程和子进程每个相同的打开描述符</p><ul><li>共享一个文件表项</li><li>共享同一个文件偏移量</li></ul><p>fork的两个常见用法：</p><ul><li>父进程与子进程执行不同的代码段</li><li>一个进程要执行一个不同的程序（fork后立即调用exec）</li></ul><h2 id="8-4-函数vfork"><a href="#8-4-函数vfork" class="headerlink" title="8.4 函数vfork"></a>8.4 函数vfork</h2><p>vfork用于创造并执行一个新程序。</p><h4 id="8-4-c"><a href="#8-4-c" class="headerlink" title="8.4.c"></a>8.4.c</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gcc <span class="number">8.4</span>.c</span><br><span class="line">$ ./a.out</span><br><span class="line">before vfork</span><br><span class="line">pid = <span class="number">22413</span>, glob = <span class="number">7</span>, car = <span class="number">89</span></span><br></pre></td></tr></table></figure><p>vfork与fork的区别在于：</p><ul><li>vfork 会保证子进程在父进程之前运行，直到子进程触发了 exec 或者 exit 。</li><li>vfork 不会将父进程的地址空间完全复制过来，在子进程调用 exec 或者 exit 之前，它在父进程的空间中运行。</li></ul><h2 id="8-5-函数exit"><a href="#8-5-函数exit" class="headerlink" title="8.5 函数exit"></a>8.5 函数exit</h2><p>如7.3所述，进程有5种正常及3种异常终止方式。</p><p>我们希望终止进程能够通知父进程它是如何终止的，实现这一点的方式是将其退出状态作为参数传递给函数。</p><p>若父进程在子进程之前终止，则子进程会被init进程收养。</p><h2 id="8-6-函数wait和waitpid"><a href="#8-6-函数wait和waitpid" class="headerlink" title="8.6 函数wait和waitpid"></a>8.6 函数wait和waitpid</h2><p>当一个进程正常或异常终止时，内核就向其父进程发送SIGCHLD信号。</p><p>当一个进程调用wait或waitpid可能发生：</p><ul><li>如果所有子进程都还在运行，则阻塞</li><li>如果一个子进程已经终止，等待父进程获取其终止状态，则取得状态返回。</li><li>如果没有任何子进程则立即出差返回</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude<span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">wait</span><span class="params">(<span class="type">int</span> *statloc)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">waitpid</span><span class="params">(<span class="type">pid_t</span> pid,<span class="type">int</span> *statloc,<span class="type">int</span> options)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">//两个函数返回值：若成功，则返回进程ID；若出错，则返回0或-1</span></span></span><br></pre></td></tr></table></figure><p>若statloc不为空，则终止状态便存放在该单元中，可以使用<sys/wait.h>中的宏来查看。</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660272991111-28e0a4d0-70b8-47be-9b6d-16398b01776f.png" alt="img"></p><h4 id="8-6-c"><a href="#8-6-c" class="headerlink" title="8.6.c"></a>8.6.c</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gcc <span class="number">8.6</span>.c</span><br><span class="line">$ ./a.out</span><br><span class="line">normal termination, exit status = <span class="number">7</span></span><br><span class="line">abnormal termination, signal number = <span class="number">6</span>  (core file generated)</span><br><span class="line">abnormal termination, signal number = <span class="number">8</span>  (core file generated)</span><br></pre></td></tr></table></figure><h4 id="对于waitpid中pid参数的解释"><a href="#对于waitpid中pid参数的解释" class="headerlink" title="对于waitpid中pid参数的解释"></a>对于waitpid中pid参数的解释</h4><ul><li>pid==1 等待任一子进程</li><li>pid&gt;0 等待进程ID与pid相等的子进程</li><li>pid==0 等待进程组ID等于调用进程组pid的任一子进程</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;a class=&quot;ghcard&quot; rel=&quot;external nofollow noopener noreferrer&quot; href=&quot;https://github.com/WuJunDehuda/apue&quot;&gt;&lt;img src=&quot;https://github-readme-sta</summary>
      
    
    
    
    <category term="Unix环境高级编程" scheme="http://wujundehuda.github.io/categories/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
    <category term="学习" scheme="http://wujundehuda.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装docker并用Portainer管理</title>
    <link href="http://wujundehuda.github.io/2022/08/11/Ubuntu%E5%AE%89%E8%A3%85docker%E5%B9%B6%E7%94%A8Portainer%E7%AE%A1%E7%90%86/"/>
    <id>http://wujundehuda.github.io/2022/08/11/Ubuntu%E5%AE%89%E8%A3%85docker%E5%B9%B6%E7%94%A8Portainer%E7%AE%A1%E7%90%86/</id>
    <published>2022-08-11T08:07:00.000Z</published>
    <updated>2022-08-11T11:26:37.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h2><p>更新apt包索引</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装 apt 依赖包，用于通过HTTPS来获取仓库</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><p>添加 Docker 的官方 GPG 密钥</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:<span class="comment">//mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span></span><br></pre></td></tr></table></figure><p>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key fingerprint <span class="number">0</span>EBFCD88</span><br><span class="line">   </span><br><span class="line">pub   rsa4096 <span class="number">2017</span><span class="number">-02</span><span class="number">-22</span> [SCEA]</span><br><span class="line">      <span class="number">9</span>DC8 <span class="number">5822</span> <span class="number">9F</span>C7 DD38 <span class="number">854</span>A  E2D8 <span class="number">8</span>D81 <span class="number">803</span>C <span class="number">0</span>EBF CD88</span><br><span class="line">uid           [ unknown] <span class="function">Docker <span class="title">Release</span> <span class="params">(CE deb)</span> &lt;docker@docker.com&gt;</span></span><br><span class="line"><span class="function">sub   rsa4096 2017-02-22 [S]</span></span><br></pre></td></tr></table></figure><p>使用以下指令设置稳定版仓库</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/ \</span></span><br><span class="line"><span class="string">  $(lsb_release -cs) \</span></span><br><span class="line"><span class="string">  stable&quot;</span></span><br></pre></td></tr></table></figure><p>安装最新版本的 Docker Engine-Community 和 containerd</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>测试 Docker 是否安装成功，输入以下指令，打印出以下信息则安装成功</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line"><span class="number">1b</span>930d010525: Pull complete                                                                                                                                  Digest: sha256:c3b4ada4687bbaa170745b3e4dd8ac3f194ca95b2d0518b417fb47e5879d9b5f</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To generate <span class="keyword">this</span> message, Docker took the following steps:</span><br><span class="line"> <span class="number">1.</span> The Docker client contacted the Docker daemon.</span><br><span class="line"> <span class="number">2.</span> The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> <span class="number">3.</span> The Docker daemon created a <span class="keyword">new</span> container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> <span class="number">4.</span> The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To <span class="keyword">try</span> something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, <span class="keyword">and</span> more with a free Docker ID:</span><br><span class="line"> https:<span class="comment">//hub.docker.com/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">For more examples <span class="keyword">and</span> ideas, visit:</span><br><span class="line"> https:<span class="comment">//docs.docker.com/get-started/</span></span><br></pre></td></tr></table></figure><h2 id="二、安装Portainer"><a href="#二、安装Portainer" class="headerlink" title="二、安装Portainer"></a>二、安装Portainer</h2><p>创建 Portainer Server 存储数据库的卷</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker volume create portainer_data</span><br></pre></td></tr></table></figure><p>下载并安装 Portainer Server 容器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -p <span class="number">8000</span>:<span class="number">8000</span> -p <span class="number">9443</span>:<span class="number">9443</span> --name portainer \</span><br><span class="line">    --restart=always \ </span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v portainer_data:/data </span><br><span class="line">    \portainer/portainer-ce:latest</span><br></pre></td></tr></table></figure><p>查看 Docker 容器状态（NAMES 标签出现 portainer/portainer-ce 则成功运行）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps</span><br></pre></td></tr></table></figure><p><strong>使用 Ubuntu 自带的火狐浏览器访问（</strong><a href="https://127.0.0.1:9443/**）****或使用局域网内另一台计算机/手机的浏览器访问（https://服务器的IP:9443/）**">https://127.0.0.1:9443/**）****或使用局域网内另一台计算机/手机的浏览器访问（https://服务器的IP:9443/）**</a></p><p><strong>对 Portainer 初始设置</strong>设置用户名及密码（8位字符或数字），点击 Get Started，载入后点击 local 即可</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660205149604-7fd72f5c-890f-42e8-af7d-fb69782fed86.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、安装docker&quot;&gt;&lt;a href=&quot;#一、安装docker&quot; class=&quot;headerlink&quot; title=&quot;一、安装docker&quot;&gt;&lt;/a&gt;一、安装docker&lt;/h2&gt;&lt;p&gt;更新apt包索引&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="Linux工具" scheme="http://wujundehuda.github.io/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="http://wujundehuda.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker的FRP内网穿透部署</title>
    <link href="http://wujundehuda.github.io/2022/08/11/%E5%9F%BA%E4%BA%8EDocker%E7%9A%84FRP%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E9%83%A8%E7%BD%B2/"/>
    <id>http://wujundehuda.github.io/2022/08/11/%E5%9F%BA%E4%BA%8EDocker%E7%9A%84FRP%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E9%83%A8%E7%BD%B2/</id>
    <published>2022-08-11T07:24:37.000Z</published>
    <updated>2022-08-11T13:14:15.866Z</updated>
    
    <content type="html"><![CDATA[<p>云服务器与本地服务器均为Ubuntu系统</p><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在新配置好的服务器上查看ip地址为192.168.1.14，直接使用ssh命令连接<code>ssh wjd@192.168.1.14</code>输入密码后成功连接。</p><p>但192.168.1.14为内网ip，内网也称为局域网，当我的笔记本电脑连接的不是家中的网络时，便不能使用该命令来访问服务器，于是乎我决定使用闲置的云服务器基于docker使用frp实现内网穿透。</p><h2 id="二、内网、公网与NAT"><a href="#二、内网、公网与NAT" class="headerlink" title="二、内网、公网与NAT"></a>二、内网、公网与NAT</h2><p>先简单介绍一下几个基本概念。</p><ul><li>公网ip：广域网IP是指以公网连接Internet上的非保留地址。</li><li>内网ip与NAT：鉴于ipv4数量，运营商将一个区域内的设备连在一起，对外只用一个公网ip标识自己。</li><li>NAT：私有IP+端口 &lt;——&gt; 公网IP+端口</li></ul><h3 id="内网穿透原理："><a href="#内网穿透原理：" class="headerlink" title="内网穿透原理："></a>内网穿透原理：</h3><p>首先我们需要一台拥有公网ip的机器（本文使用腾讯云服务器）</p><p>在云服务器上部署frp服务端，在本地服务器上部署frp客户端。</p><p>通过frp转发，以云服务器为中继实现内网穿透。</p><h2 id="三、搭建frp服务"><a href="#三、搭建frp服务" class="headerlink" title="三、搭建frp服务"></a>三、搭建frp服务</h2><h3 id="3-1-在云服务器与本地服务器安装docker"><a href="#3-1-在云服务器与本地服务器安装docker" class="headerlink" title="3.1 在云服务器与本地服务器安装docker"></a>3.1 在云服务器与本地服务器安装docker</h3><p>docker安装服务方便快捷便于管理。</p><h3 id="3-2-搭建服务端frps"><a href="#3-2-搭建服务端frps" class="headerlink" title="3.2 搭建服务端frps"></a>3.2 搭建服务端frps</h3><h4 id="3-2-1-编辑配置文件"><a href="#3-2-1-编辑配置文件" class="headerlink" title="3.2.1 编辑配置文件"></a>3.2.1 编辑配置文件</h4><p>由于要使用端口及配置文件映射，我们提前配置好服务端配置文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/frp</span><br><span class="line">touch /etc/frp/frps.ini</span><br><span class="line">vi /etc/frp/frps.ini</span><br></pre></td></tr></table></figure><p>配置文件如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"># 监听端口</span><br><span class="line">bind_port = <span class="number">7000</span></span><br><span class="line"># 面板端口</span><br><span class="line">dashboard_port = <span class="number">7500</span></span><br><span class="line"># 登录面板账号设置</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin@<span class="number">123</span></span><br><span class="line"></span><br><span class="line"># 身份验证</span><br><span class="line">token = <span class="number">12345678</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-使用以下命令运行frps"><a href="#3-2-2-使用以下命令运行frps" class="headerlink" title="3.2.2 使用以下命令运行frps"></a>3.2.2 使用以下命令运行frps</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --network host -d -v /opt/docker/frps/frps.ini:/etc/frp/frps.ini --name frps snowdreamtech/frps</span><br></pre></td></tr></table></figure><p>—network host: host 网络模式，所有容器端口都对应属主机端口，不存在映射关系。</p><h4 id="3-2-3-前往服务器控制台放行对应端口"><a href="#3-2-3-前往服务器控制台放行对应端口" class="headerlink" title="3.2.3 前往服务器控制台放行对应端口"></a>3.2.3 前往服务器控制台放行对应端口</h4><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660209285979-e9f2011b-7aac-4384-a2e1-488964aa1633.png" alt="img"></p><h4 id="3-2-4-访问web界面"><a href="#3-2-4-访问web界面" class="headerlink" title="3.2.4 访问web界面"></a>3.2.4 访问web界面</h4><p>使用<a href="http://ip:7500，其中ip为你的服务器ip，使用网页打开。">http://ip:7500，其中ip为你的服务器ip，使用网页打开。</a></p><p>使用配置文件预设的账号密码登陆。</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660209529676-8b54bca3-ecaf-4eb3-95e3-7160b985d97c.png" alt="img"></p><p>可以看到服务端配置成功等待连接。</p><h3 id="3-3-搭建客户端frpc"><a href="#3-3-搭建客户端frpc" class="headerlink" title="3.3 搭建客户端frpc"></a>3.3 搭建客户端frpc</h3><p>按照同样的方式配置客户端</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/frp</span><br><span class="line">touch /etc/frp/frpc.ini</span><br><span class="line">vi /etc/frp/frpc.ini</span><br></pre></td></tr></table></figure><p>配置文件如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"># server_addr为FRPS服务器IP地址</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line"># server_port为服务端监听端口，bind_port</span><br><span class="line">server_port = <span class="number">7000</span></span><br><span class="line"># 身份验证</span><br><span class="line">token = <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># [ssh] 为服务名称，下方此处设置为，访问frp服务段的<span class="number">2288</span>端口时，等同于通过中转服务器访问<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>的<span class="number">22</span>端口。</span><br><span class="line"><span class="meta"># type 为连接的类型，此处为tcp</span></span><br><span class="line"># local_ip 为中转客户端实际访问的IP </span><br><span class="line"># local_port 为目标端口</span><br><span class="line"># remote_port 为远程端口</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">local_port = <span class="number">22</span></span><br><span class="line">remote_port = <span class="number">2222</span></span><br></pre></td></tr></table></figure><p>运行frpc</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --network host -d -v /opt/docker/frpc/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc</span><br></pre></td></tr></table></figure><h2 id="四、使用frp服务"><a href="#四、使用frp服务" class="headerlink" title="四、使用frp服务"></a>四、使用frp服务</h2><p>在这里笔者踩了很久的坑，使用ssh连接时输入的用户名应为远程主机的用户名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh 本地服务器的用户名@你的云服务器ip -p <span class="number">2222</span></span><br><span class="line"># <span class="number">2222</span>为设置的远程端口</span><br></pre></td></tr></table></figure><p>输入密码后连接成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;云服务器与本地服务器均为Ubuntu系统&lt;/p&gt;
&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;在新配置好的服务器上查看ip地址为192.168.1.14，直接使用</summary>
      
    
    
    
    <category term="折腾一台小服务器" scheme="http://wujundehuda.github.io/categories/%E6%8A%98%E8%85%BE%E4%B8%80%E5%8F%B0%E5%B0%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="http://wujundehuda.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Unix环境高级编程第三章-文件I/O</title>
    <link href="http://wujundehuda.github.io/2022/08/11/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%96%87%E4%BB%B6I-O/"/>
    <id>http://wujundehuda.github.io/2022/08/11/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%96%87%E4%BB%B6I-O/</id>
    <published>2022-08-11T03:11:04.000Z</published>
    <updated>2022-08-28T08:34:34.476Z</updated>
    
    <content type="html"><![CDATA[<a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/WuJunDehuda/apue"><img src="https://github-readme-stats.vercel.app/api/pin/?username=WuJunDehuda&repo=apue&show_owner=true"/></a><h2 id="3-2-文件描述符"><a href="#3-2-文件描述符" class="headerlink" title="3.2 文件描述符"></a>3.2 文件描述符</h2><ul><li>STDIN_FILENO（0）与进程的标准输入关联</li><li>STDOUT_FILENO（1）与进程的标准输出关联</li><li>STDERR_FILENO（2）与进程的标准错误关联</li></ul><p>在头文件<unistd.h>中定义</p><h2 id="3-3-函数open和openat"><a href="#3-3-函数open和openat" class="headerlink" title="3.3 函数open和openat"></a>3.3 函数open和openat</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用open或openat函数可以打开或创造一个文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path,<span class="type">int</span> oflag,...<span class="comment">/* mode_t mode */</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">         </span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span> open(<span class="type">const</span> <span class="type">char</span> *path,<span class="type">const</span> <span class="type">char</span> *path,<span class="type">int</span> oflag,...<span class="comment">/* mode_t mode */</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">         </span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">// 两函数的返回值:若成功，返回文件描述符;若出错，返回-1</span></span></span></span><br></pre></td></tr></table></figure><h3 id="path参数：要打开或创造文件的名字"><a href="#path参数：要打开或创造文件的名字" class="headerlink" title="path参数：要打开或创造文件的名字"></a>path参数：要打开或创造文件的名字</h3><h3 id="oflag参数：说明函数的多个选项"><a href="#oflag参数：说明函数的多个选项" class="headerlink" title="oflag参数：说明函数的多个选项"></a>oflag参数：说明函数的多个选项</h3><ul><li>O_RDONLY        只读打开</li><li>O_WRONLY        只写打开</li><li>O_DRWR        读、写打开</li><li>O_EXEC         只执行打开</li><li>O_SEARCH        只搜索打开</li></ul><p>以上参数必须且只能指定一个</p><p><strong>由open和openat函数返回的文件描述符一定是最小未用描述符数值</strong></p><h3 id="open与openat的区别"><a href="#open与openat的区别" class="headerlink" title="open与openat的区别"></a>open与openat的区别</h3><p>fd参数指出了相对路径名在文件系统中的开始地址</p><ul><li>openat使线程可以使用相对路径名打开目录中的文件</li><li>避免TOCTTOU错误</li></ul><p>如果有两个基于文件的函数调用，第二个调用依赖第一个调用的结果，因为两个操作不是原子操作，程序是脆弱的。</p><h2 id="3-4-函数creat"><a href="#3-4-函数creat" class="headerlink" title="3.4 函数creat"></a>3.4 函数creat</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 也可调用creat函数创建一个新文件。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fentl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">creat</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> *path, mode_ t mode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值:若成功，返回为只写打开的文件描述符;若出错，返回-1</span></span><br></pre></td></tr></table></figure><h2 id="3-5-函数close"><a href="#3-5-函数close" class="headerlink" title="3.5 函数close"></a>3.5 函数close</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可调用close函数关闭一个打开文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">close</span> <span class="params">(<span class="type">int</span> fd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值:若成功，返回0;若出错，返回-1</span></span><br></pre></td></tr></table></figure><h2 id="3-6-函数lseek"><a href="#3-6-函数lseek" class="headerlink" title="3.6 函数lseek"></a>3.6 函数lseek</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以调用lseek显式地为一个打开文件设置偏移量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">off_ t <span class="title">lseek</span><span class="params">(<span class="type">int</span> fd, off_ t offset， <span class="type">int</span> whence)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值:若成功，返回新的文件偏移量;若出错，返回-1</span></span><br></pre></td></tr></table></figure><p>对参数offset的解释与参数whence的值有关:</p><ul><li>若whence是SEEKSET，则将该文件的偏移量设置为距文件开始处offset个字节。</li><li>若whence是SEEK_ CUR， 则将该文件的偏移量设置为其当前值加fset, ofset可为正或负。</li><li>若whence是SEEK_ END，则将该文件的偏移量设置为文件长度加offset, offset 可正可负。</li></ul><ul><li>0绝对偏移量</li><li>1相对偏移量</li><li>2相对于尾部偏移量</li></ul><p>也可用于确定某文件是否可以设置偏移量，如管道、FIFO或网络套接字。</p><p>若不能设置偏移量则返回-1。</p><h3 id="使用lseek创造一个具有空洞的程序"><a href="#使用lseek创造一个具有空洞的程序" class="headerlink" title="使用lseek创造一个具有空洞的程序"></a>使用lseek创造一个具有空洞的程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;apue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>buf1[] = <span class="string">&quot;abcdefghij&quot;</span>;</span><br><span class="line"><span class="type">char</span>buf2[] = <span class="string">&quot;ABCDEFGHIJ&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>fd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((fd = <span class="built_in">creat</span>(<span class="string">&quot;file.hole&quot;</span>, FILE_MODE)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">err_sys</span>(<span class="string">&quot;creat error&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">write</span>(fd, buf1, <span class="number">10</span>) != <span class="number">10</span>)</span><br><span class="line"><span class="built_in">err_sys</span>(<span class="string">&quot;buf1 write error&quot;</span>);</span><br><span class="line"><span class="comment">/* offset now = 10 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">lseek</span>(fd, <span class="number">16384</span>, SEEK_SET) == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">err_sys</span>(<span class="string">&quot;lseek error&quot;</span>);</span><br><span class="line"><span class="comment">/* offset now = 16384 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">write</span>(fd, buf2, <span class="number">10</span>) != <span class="number">10</span>)</span><br><span class="line"><span class="built_in">err_sys</span>(<span class="string">&quot;buf2 write error&quot;</span>);</span><br><span class="line"><span class="comment">/* offset now = 16394 */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660184692174-bd3f1d24-d83a-4b74-9d61-2c57d1f4f100-20220812205545251.png" alt="img"></p><h2 id="3-7-函数read"><a href="#3-7-函数read" class="headerlink" title="3.7 函数read"></a>3.7 函数read</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用read函数从打开文件中读数据。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ssize_ t <span class="title">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, size_ t nbytes)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值:读到的字节数，若已到文件尾，返回0;若出错返回-1 .</span></span><br><span class="line"><span class="comment">// 如read成功，则返回读到的字节数。如已到达文件的尾端，则返回0</span></span><br></pre></td></tr></table></figure><p>有多种情况使世纪读到的字节数少于要读的字节数：</p><ul><li>读普通文件时，在读到要求字节数之前已到达文件尾部。下次调用read时返回0.</li><li>从终端设备读时。</li><li>从网络设备读时，网络的缓冲机制可能造成。</li><li>从管道或FIFO读时，管道包含字节少于所需的数量，那么read将返回实际可用的字节数。</li></ul><h2 id="3-8-函数write"><a href="#3-8-函数write" class="headerlink" title="3.8 函数write"></a>3.8 函数write</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用write函数向打开文件写数据</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ssize_ t <span class="title">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf， size_ t nbytes)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值:若成功，返回已写的字节数:若出错，返回-1</span></span><br></pre></td></tr></table></figure><p>返回值常常与nbytes的值相同。</p><h2 id="3-9-I-O效率"><a href="#3-9-I-O效率" class="headerlink" title="3.9 I/O效率"></a>3.9 I/O效率</h2><p>本节主要讨论缓冲区大小对I/O效率的影响</p><p>大多数文件系统采用预读技术，使用较大缓冲区可以提高读写效率，但缓冲区足够大时效率几乎相同。</p><h2 id="3-10-文件共享"><a href="#3-10-文件共享" class="headerlink" title="3.10 文件共享"></a>3.10 文件共享</h2><h3 id="内核用于所有I-O的数据结构"><a href="#内核用于所有I-O的数据结构" class="headerlink" title="内核用于所有I/O的数据结构"></a>内核用于所有I/O的数据结构</h3><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660185557445-39386832-7426-4236-9890-c697df81d0d9-20220812205546562.png" alt="img"></p><p>每个进程都有自己独立的文件表项，这可以使每个进程都有自己对该文件的当前偏移量。</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660185954611-649b880e-fadb-4fb1-8517-7ab30c0cf24a-20220812205547691.png" alt="img"></p><h2 id="3-11-原子操作"><a href="#3-11-原子操作" class="headerlink" title="3.11 原子操作"></a>3.11 原子操作</h2><h2 id="3-12-函数dup和dup2"><a href="#3-12-函数dup和dup2" class="headerlink" title="3.12 函数dup和dup2"></a>3.12 函数dup和dup2</h2><p>下面两个函数都可用来复制一个现有的文件描述符:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面两个函数都可用来复制一个现有的文件描述符</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dup</span><span class="params">(<span class="type">int</span> fd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dup2</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> fd2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两函数的返回值:若成功，返回新的文件描述符:若出错，返回-1</span></span><br></pre></td></tr></table></figure><p>由dup返回的新文件描述符一定是当前可用的最小数值。</p><p>对于dup2，若fd2已打开，先关闭fd2；若fd2等于fd，则直接返回fd2.</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660186375474-712798d2-75cc-4732-8d6a-44ff67ba3ea9-20220812205548658.png" alt="img"></p><h2 id="3-14-函数fcntl！！"><a href="#3-14-函数fcntl！！" class="headerlink" title="3.14 函数fcntl！！"></a>3.14 函数fcntl！！</h2><p>fcntl函数可以改变已经打开文件的属性:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcnt1.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fcntl</span> <span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd, ... <span class="comment">/* int arg */</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若成功，则依赖于cmd (见下) ;若出错，返回-1</span></span><br></pre></td></tr></table></figure><p>fcntl函数有以下5种功能:</p><p>1.复制一个已有的描述符(cmd=F<em>DUPFD或F</em> DUPFD_ CLOEXEC)。</p><p>2.获取/设置文件描述符标志(cmd=F<em> GETFD或F</em> SETFD)。</p><p>3.获取/设置文件状态标志(cmd=F<em> GETFL或F</em> SETFL)。</p><p>4.获取/设置异步I/O所有权(cmd= F<em>GETOWN或F</em> SETOWN)。</p><p>5.获取/设置记录锁(cmd=F<em> GETLK、F</em> SETLK或E_ SETLKW)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;a class=&quot;ghcard&quot; rel=&quot;external nofollow noopener noreferrer&quot; href=&quot;https://github.com/WuJunDehuda/apue&quot;&gt;&lt;img src=&quot;https://github-readme-sta</summary>
      
    
    
    
    <category term="Unix环境高级编程" scheme="http://wujundehuda.github.io/categories/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
    <category term="学习" scheme="http://wujundehuda.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Unix环境高级编程开篇-apue.h配置</title>
    <link href="http://wujundehuda.github.io/2022/08/11/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%BC%80%E7%AF%87-apue-h%E9%85%8D%E7%BD%AE/"/>
    <id>http://wujundehuda.github.io/2022/08/11/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%BC%80%E7%AF%87-apue-h%E9%85%8D%E7%BD%AE/</id>
    <published>2022-08-11T01:38:43.000Z</published>
    <updated>2022-08-14T01:43:51.268Z</updated>
    
    <content type="html"><![CDATA[<a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/WuJunDehuda/apue"><img src="https://github-readme-stats.vercel.app/api/pin/?username=WuJunDehuda&repo=apue&show_owner=true"/></a><p>书中大部分代码都#include “apue”头文件，本文件记录了配置apue头文件的过程。</p><h2 id="一、下载该头文件"><a href="#一、下载该头文件" class="headerlink" title="一、下载该头文件"></a>一、下载该头文件</h2><ul><li>使用命令行下载<code>wget http://www.apuebook.com/src.3e.tar.gz</code></li><li>到官网手动下载 <a href="http://www.apuebook.com/apue3e.html">传送门</a></li></ul><h2 id="二、解压"><a href="#二、解压" class="headerlink" title="二、解压"></a>二、解压</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf src.3e.tar.gz</span><br></pre></td></tr></table></figure><h2 id="三、复制两个文件"><a href="#三、复制两个文件" class="headerlink" title="三、复制两个文件"></a>三、复制两个文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/home/Downloads/apu<span class="number">.3</span>e/include    <span class="comment">/* apue.h */</span></span><br><span class="line">/home/Downloads/apu<span class="number">.3</span>e/lib       <span class="comment">/* error.c */</span></span><br><span class="line">##将两个文件拷贝到默认的c语言库中</span><br><span class="line">cp ./include/apue.h ./lib/error.c /usr/include</span><br></pre></td></tr></table></figure><h2 id="四、修改文件内容"><a href="#四、修改文件内容" class="headerlink" title="四、修改文件内容"></a>四、修改文件内容</h2><h4 id="在apue-h-头文件的最后一行前添加一行代码："><a href="#在apue-h-头文件的最后一行前添加一行代码：" class="headerlink" title="在apue.h 头文件的最后一行前添加一行代码："></a>在apue.h 头文件的最后一行前添加一行代码：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;erro.c&quot;</span><br></pre></td></tr></table></figure><p>最后效果如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;error.c&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">/* _APUE_H */</span></span></span><br></pre></td></tr></table></figure><h2 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h2><p>最后便可使用apue头文件，不需要再次编译apue.3e</p>]]></content>
    
    
      
      
    <summary type="html">&lt;a class=&quot;ghcard&quot; rel=&quot;external nofollow noopener noreferrer&quot; href=&quot;https://github.com/WuJunDehuda/apue&quot;&gt;&lt;img src=&quot;https://github-readme-sta</summary>
      
    
    
    
    <category term="Unix环境高级编程" scheme="http://wujundehuda.github.io/categories/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
    <category term="学习" scheme="http://wujundehuda.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Linux终端命令行神器screen</title>
    <link href="http://wujundehuda.github.io/2022/08/06/Linux%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A5%9E%E5%99%A8screen/"/>
    <id>http://wujundehuda.github.io/2022/08/06/Linux%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A5%9E%E5%99%A8screen/</id>
    <published>2022-08-06T01:24:06.000Z</published>
    <updated>2022-08-11T09:51:50.883Z</updated>
    
    <content type="html"><![CDATA[<p>screen的功能<br>screen的功能大体有三个：<br>● 会话恢复：只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。<br>● 多窗口：在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。<br>● 会话共享：Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。<br>这三个功能，其实互相交织，组成screen功能繁多的命令集。<br><code>sudo apt install screen</code><br>screen命令集<br>screen，通常的命令格式为：<br><code>screen [-opts] [cmd [args]]</code><br>通常情况下，使用一下基础命令即可，高阶命令过多，比较难记。<br>注意：<br>● 命令区分大小写<br>状态介绍<br>通常情况下，screen创建的虚拟终端，有两个工作模式：<br>● Attached：表示当前screen正在作为主终端使用，为活跃状态。<br>● Detached：表示当前screen正在后台使用，为非激发状态。<br>通常情况下，不需要关注上面的状态。<br>基础命令<br>这里列举一些我认为常用的screen命令，使用以下命令基本满足日常使用。<br>● 查询screen提示：<br><code>screen -help</code><br>● 终端列表<br><code>screen -ls</code><br>● 新建终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#新建一个叫test的虚拟终端</span><br><span class="line">#注意S为大写</span><br><span class="line"></span><br><span class="line">screen -S test</span><br><span class="line">screen -R test</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;screen的功能&lt;br&gt;screen的功能大体有三个：&lt;br&gt;● 会话恢复：只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen </summary>
      
    
    
    
    <category term="Linux工具" scheme="http://wujundehuda.github.io/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wujundehuda.github.io/2022/07/24/hello-world/"/>
    <id>http://wujundehuda.github.io/2022/07/24/hello-world/</id>
    <published>2022-07-24T08:51:31.153Z</published>
    <updated>2022-07-24T08:51:31.154Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
