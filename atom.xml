<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WuJean的随想录</title>
  
  
  <link href="http://wujundehuda.github.io/atom.xml" rel="self"/>
  
  <link href="http://wujundehuda.github.io/"/>
  <updated>2022-08-11T03:22:34.736Z</updated>
  <id>http://wujundehuda.github.io/</id>
  
  <author>
    <name>WuJean</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unix环境高级编程第三章-文件I/O</title>
    <link href="http://wujundehuda.github.io/2022/08/11/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%96%87%E4%BB%B6I-O/"/>
    <id>http://wujundehuda.github.io/2022/08/11/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%96%87%E4%BB%B6I-O/</id>
    <published>2022-08-11T03:11:04.000Z</published>
    <updated>2022-08-11T03:22:34.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-2-文件描述符"><a href="#3-2-文件描述符" class="headerlink" title="3.2 文件描述符"></a>3.2 文件描述符</h2><ul><li>STDIN_FILENO（0）与进程的标准输入关联</li><li>STDOUT_FILENO（1）与进程的标准输出关联</li><li>STDERR_FILENO（2）与进程的标准错误关联</li></ul><p>在头文件&lt;unistd.h&gt;中定义</p><h2 id="3-3-函数open和openat"><a href="#3-3-函数open和openat" class="headerlink" title="3.3 函数open和openat"></a>3.3 函数open和openat</h2><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660183226415-f960ff26-4c40-450d-8188-656da8818304.png"></p><h3 id="path参数：要打开或创造文件的名字"><a href="#path参数：要打开或创造文件的名字" class="headerlink" title="path参数：要打开或创造文件的名字"></a>path参数：要打开或创造文件的名字</h3><h3 id="oflag参数：说明函数的多个选项"><a href="#oflag参数：说明函数的多个选项" class="headerlink" title="oflag参数：说明函数的多个选项"></a>oflag参数：说明函数的多个选项</h3><ul><li>O_RDONLY只读打开</li><li>O_WRONLY只写打开</li><li>O_DRWR读、写打开</li><li>O_EXEC 只执行打开</li><li>O_SEARCH只搜索打开</li></ul><p>以上参数必须且只能指定一个</p><p><strong>由open和openat函数返回的文件描述符一定是最小未用描述符数值</strong></p><h3 id="open与openat的区别"><a href="#open与openat的区别" class="headerlink" title="open与openat的区别"></a>open与openat的区别</h3><p>fd参数指出了相对路径名在文件系统中的开始地址</p><ul><li>openat使线程可以使用相对路径名打开目录中的文件</li><li>避免TOCTTOU错误</li></ul><p>如果有两个基于文件的函数调用，第二个调用依赖第一个调用的结果，因为两个操作不是原子操作，程序是脆弱的。</p><h2 id="3-4-函数creat"><a href="#3-4-函数creat" class="headerlink" title="3.4 函数creat"></a>3.4 函数creat</h2><p><img src="/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%96%87%E4%BB%B6I-O.assets/1660184087029-08f01020-eda7-4966-8de6-9daa4b56ab30-20220811111651832.png"></p><h2 id="3-5-函数close"><a href="#3-5-函数close" class="headerlink" title="3.5 函数close"></a>3.5 函数close</h2><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660184130351-91dbfa1c-4aff-4e83-a6e3-5a521233269a.png"></p><h2 id="3-6-函数lseek"><a href="#3-6-函数lseek" class="headerlink" title="3.6 函数lseek"></a>3.6 函数lseek</h2><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660184171796-7f1c43bc-6e7e-4411-bd90-a42409f57c9b.png"></p><ul><li>0绝对偏移量</li><li>1相对偏移量</li><li>2相对于尾部偏移量</li></ul><p>也可用于确定某文件是否可以设置偏移量，如管道、FIFO或网络套接字。</p><p>若不能设置偏移量则返回-1。</p><h3 id="使用lseek创造一个具有空洞的程序"><a href="#使用lseek创造一个具有空洞的程序" class="headerlink" title="使用lseek创造一个具有空洞的程序"></a>使用lseek创造一个具有空洞的程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;apue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>buf1[] = <span class="string">&quot;abcdefghij&quot;</span>;</span><br><span class="line"><span class="type">char</span>buf2[] = <span class="string">&quot;ABCDEFGHIJ&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>fd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((fd = <span class="built_in">creat</span>(<span class="string">&quot;file.hole&quot;</span>, FILE_MODE)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">err_sys</span>(<span class="string">&quot;creat error&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">write</span>(fd, buf1, <span class="number">10</span>) != <span class="number">10</span>)</span><br><span class="line"><span class="built_in">err_sys</span>(<span class="string">&quot;buf1 write error&quot;</span>);</span><br><span class="line"><span class="comment">/* offset now = 10 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">lseek</span>(fd, <span class="number">16384</span>, SEEK_SET) == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">err_sys</span>(<span class="string">&quot;lseek error&quot;</span>);</span><br><span class="line"><span class="comment">/* offset now = 16384 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">write</span>(fd, buf2, <span class="number">10</span>) != <span class="number">10</span>)</span><br><span class="line"><span class="built_in">err_sys</span>(<span class="string">&quot;buf2 write error&quot;</span>);</span><br><span class="line"><span class="comment">/* offset now = 16394 */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660184692174-bd3f1d24-d83a-4b74-9d61-2c57d1f4f100.png"></p><h2 id="3-7-函数read"><a href="#3-7-函数read" class="headerlink" title="3.7 函数read"></a>3.7 函数read</h2><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660184850932-cbe6e879-797e-4d9a-a43e-edd4480980ed.png"></p><p>有多种情况使世纪读到的字节数少于要读的字节数：</p><ul><li>读普通文件时，在读到要求字节数之前已到达文件尾部。下次调用read时返回0.</li><li>从终端设备读时。</li><li>从网络设备读时，网络的缓冲机制可能造成。</li><li>从管道或FIFO读时，管道包含字节少于所需的数量，那么read将返回实际可用的字节数。</li></ul><h2 id="3-8-函数write"><a href="#3-8-函数write" class="headerlink" title="3.8 函数write"></a>3.8 函数write</h2><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660185086011-14e1d5c6-24d6-4fc9-947b-431e91c1214e.png"></p><p>返回值常常与nbytes的值相同。</p><h2 id="3-9-I-x2F-O效率"><a href="#3-9-I-x2F-O效率" class="headerlink" title="3.9 I&#x2F;O效率"></a>3.9 I&#x2F;O效率</h2><p>本节主要讨论缓冲区大小对I&#x2F;O效率的影响</p><p>大多数文件系统采用预读技术，使用较大缓冲区可以提高读写效率，但缓冲区足够大时效率几乎相同。</p><h2 id="3-10-文件共享"><a href="#3-10-文件共享" class="headerlink" title="3.10 文件共享"></a>3.10 文件共享</h2><h3 id="内核用于所有I-x2F-O的数据结构"><a href="#内核用于所有I-x2F-O的数据结构" class="headerlink" title="内核用于所有I&#x2F;O的数据结构"></a>内核用于所有I&#x2F;O的数据结构</h3><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660185557445-39386832-7426-4236-9890-c697df81d0d9.png"></p><p>每个进程都有自己独立的文件表项，这可以使每个进程都有自己对该文件的当前偏移量。</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660185954611-649b880e-fadb-4fb1-8517-7ab30c0cf24a-20220811112025890.png"></p><h2 id="3-11-原子操作"><a href="#3-11-原子操作" class="headerlink" title="3.11 原子操作"></a>3.11 原子操作</h2><h2 id="3-12-函数dup和dup2"><a href="#3-12-函数dup和dup2" class="headerlink" title="3.12 函数dup和dup2"></a>3.12 函数dup和dup2</h2><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660186276279-0788fa8d-b717-47b8-b92a-0bafccb54b80-20220811112145124.png"></p><p>由dup返回的新文件描述符一定是当前可用的最小数值。</p><p>对于dup2，若fd2已打开，先关闭fd2；若fd2等于fd，则直接返回fd2.</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660186375474-712798d2-75cc-4732-8d6a-44ff67ba3ea9-20220811112230092.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;3-2-文件描述符&quot;&gt;&lt;a href=&quot;#3-2-文件描述符&quot; class=&quot;headerlink&quot; title=&quot;3.2 文件描述符&quot;&gt;&lt;/a&gt;3.2 文件描述符&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;STDIN_FILENO（0）与进程的标准输入关联&lt;/li&gt;
&lt;li&gt;S</summary>
      
    
    
    
    
    <category term="Unix环境高级编程" scheme="http://wujundehuda.github.io/tags/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Unix环境高级编程开篇-apue.h配置</title>
    <link href="http://wujundehuda.github.io/2022/08/11/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%BC%80%E7%AF%87-apue-h%E9%85%8D%E7%BD%AE/"/>
    <id>http://wujundehuda.github.io/2022/08/11/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%BC%80%E7%AF%87-apue-h%E9%85%8D%E7%BD%AE/</id>
    <published>2022-08-11T01:38:43.000Z</published>
    <updated>2022-08-11T01:40:47.850Z</updated>
    
    <content type="html"><![CDATA[<p>书中大部分代码都#include “apue”头文件，本文件记录了配置apue头文件的过程。</p><h2 id="一、下载该头文件"><a href="#一、下载该头文件" class="headerlink" title="一、下载该头文件"></a>一、下载该头文件</h2><ul><li>使用命令行下载<code>wget http://www.apuebook.com/src.3e.tar.gz</code></li><li>到官网手动下载 <a href="http://www.apuebook.com/apue3e.html">传送门</a></li></ul><h2 id="二、解压"><a href="#二、解压" class="headerlink" title="二、解压"></a>二、解压</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf src.3e.tar.gz</span><br></pre></td></tr></table></figure><h2 id="三、复制两个文件"><a href="#三、复制两个文件" class="headerlink" title="三、复制两个文件"></a>三、复制两个文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/home/Downloads/apu<span class="number">.3</span>e/include    <span class="comment">/* apue.h */</span></span><br><span class="line">/home/Downloads/apu<span class="number">.3</span>e/lib       <span class="comment">/* error.c */</span></span><br><span class="line">##将两个文件拷贝到默认的c语言库中</span><br><span class="line">cp ./include/apue.h ./lib/error.c /usr/include</span><br></pre></td></tr></table></figure><h2 id="四、修改文件内容"><a href="#四、修改文件内容" class="headerlink" title="四、修改文件内容"></a>四、修改文件内容</h2><h4 id="在apue-h-头文件的最后一行前添加一行代码："><a href="#在apue-h-头文件的最后一行前添加一行代码：" class="headerlink" title="在apue.h 头文件的最后一行前添加一行代码："></a>在apue.h 头文件的最后一行前添加一行代码：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;erro.c&quot;</span><br></pre></td></tr></table></figure><p>最后效果如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;error.c&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">/* _APUE_H */</span></span></span><br></pre></td></tr></table></figure><h2 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h2><p>最后便可使用apue头文件，不需要再次编译apue.3e</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;书中大部分代码都#include “apue”头文件，本文件记录了配置apue头文件的过程。&lt;/p&gt;
&lt;h2 id=&quot;一、下载该头文件&quot;&gt;&lt;a href=&quot;#一、下载该头文件&quot; class=&quot;headerlink&quot; title=&quot;一、下载该头文件&quot;&gt;&lt;/a&gt;一、下载该头文件</summary>
      
    
    
    
    
    <category term="Unix环境高级编程" scheme="http://wujundehuda.github.io/tags/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux终端命令行神器screen</title>
    <link href="http://wujundehuda.github.io/2022/08/06/Linux%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A5%9E%E5%99%A8screen/"/>
    <id>http://wujundehuda.github.io/2022/08/06/Linux%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A5%9E%E5%99%A8screen/</id>
    <published>2022-08-06T01:24:06.000Z</published>
    <updated>2022-08-06T03:28:44.098Z</updated>
    
    <content type="html"><![CDATA[<p>screen的功能<br>screen的功能大体有三个：<br>● 会话恢复：只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。<br>● 多窗口：在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。<br>● 会话共享：Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。<br>这三个功能，其实互相交织，组成screen功能繁多的命令集。<br><code>sudo apt install screen</code><br>screen命令集<br>screen，通常的命令格式为：<br><code>screen [-opts] [cmd [args]]</code><br>通常情况下，使用一下基础命令即可，高阶命令过多，比较难记。<br>注意：<br>● 命令区分大小写<br>状态介绍<br>通常情况下，screen创建的虚拟终端，有两个工作模式：<br>● Attached：表示当前screen正在作为主终端使用，为活跃状态。<br>● Detached：表示当前screen正在后台使用，为非激发状态。<br>通常情况下，不需要关注上面的状态。<br>基础命令<br>这里列举一些我认为常用的screen命令，使用以下命令基本满足日常使用。<br>● 查询screen提示：<br><code>screen -help</code><br>● 终端列表<br><code>screen -ls</code><br>● 新建终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#新建一个叫test的虚拟终端</span><br><span class="line">#注意S为大写</span><br><span class="line"></span><br><span class="line">screen -S test</span><br><span class="line">screen -R test</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;screen的功能&lt;br&gt;screen的功能大体有三个：&lt;br&gt;● 会话恢复：只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen </summary>
      
    
    
    
    
    <category term="Linux工具" scheme="http://wujundehuda.github.io/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wujundehuda.github.io/2022/07/24/hello-world/"/>
    <id>http://wujundehuda.github.io/2022/07/24/hello-world/</id>
    <published>2022-07-24T08:51:31.153Z</published>
    <updated>2022-07-24T08:51:31.154Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
