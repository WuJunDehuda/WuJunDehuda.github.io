<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WuJean的随想录</title>
  
  
  <link href="http://wujundehuda.github.io/atom.xml" rel="self"/>
  
  <link href="http://wujundehuda.github.io/"/>
  <updated>2022-08-12T03:13:08.653Z</updated>
  <id>http://wujundehuda.github.io/</id>
  
  <author>
    <name>WuJean</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unix环境高级编程第八章-进程控制</title>
    <link href="http://wujundehuda.github.io/2022/08/12/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E5%85%AB%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://wujundehuda.github.io/2022/08/12/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E5%85%AB%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2022-08-12T03:12:21.000Z</published>
    <updated>2022-08-12T03:13:08.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="8-2-进程标识"><a href="#8-2-进程标识" class="headerlink" title="8.2 进程标识"></a>8.2 进程标识</h2><p>每个进程都有一个非负整型表示唯一的进程ID。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列函数返回进程的一些其他标识符</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">getpid</span><span class="params">(<span class="type">void</span>)</span></span>;<span class="comment">//返回值：调用进程的进程ID</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">getppid</span><span class="params">(<span class="type">void</span>)</span></span>;<span class="comment">//返回值：调用进程的父进程ID</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">upid_t</span> <span class="title">getpid</span><span class="params">(<span class="type">void</span>)</span></span>;<span class="comment">//返回值：调用进程的实际用户ID</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">gpid_t</span> <span class="title">getpid</span><span class="params">(<span class="type">void</span>)</span></span>;<span class="comment">//返回值：调用进程的实际组ID</span></span><br></pre></td></tr></table></figure><h2 id="8-3-函数fork"><a href="#8-3-函数fork" class="headerlink" title="8.3 函数fork"></a>8.3 函数fork</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个现有的进程可以调用fork函数创建一个新进程</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">fork</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="comment">//返回值：子进程返回0，父进程返回子进程ID；若出错，返回-1</span></span><br></pre></td></tr></table></figure><p>子进程是父进程的副本，但并不共享存储空间。父进程和子进程共享正文段。</p><p>很多时候子进程并不执行父进程的完全副本，而是使用了写时复制（COW）技术，由父进程与子进程共享数据区域，由内核将他们的权限改变为只读，当需要修改时再复制一份副本。</p><h4 id="8-3-c"><a href="#8-3-c" class="headerlink" title="8.3.c"></a>8.3.c</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ gcc <span class="number">8.3</span>.c -lapue</span><br><span class="line">$ ./a.out </span><br><span class="line">a write to stdout</span><br><span class="line">before fork</span><br><span class="line">pid = <span class="number">11998</span>, glob = <span class="number">7</span>, var = <span class="number">89</span></span><br><span class="line">pid = <span class="number">11997</span>, glob = <span class="number">6</span>, var = <span class="number">88</span></span><br><span class="line">$ ./a.out &gt; temp.out</span><br><span class="line">$ cat temp.out </span><br><span class="line">a write to stdout</span><br><span class="line">before fork</span><br><span class="line">pid = <span class="number">12021</span>, glob = <span class="number">7</span>, var = <span class="number">89</span></span><br><span class="line">before fork</span><br><span class="line">pid = <span class="number">12020</span>, glob = <span class="number">6</span>, var = <span class="number">88</span></span><br></pre></td></tr></table></figure><p>当输出到终端时stdout是行缓冲，输出到文件时是全缓冲。</p><p>全缓冲。输入或输出缓冲区被填满，会进行实际 I&#x2F;O 操作。其他情况，如强制刷新、进程结束也会进行实际I&#x2F;O操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">write</span>(STDOUT_FILENO, buf, <span class="built_in">sizeof</span>(buf)) != <span class="built_in">sizeof</span>(buf))</span><br></pre></td></tr></table></figure><p>sizeof(buf)-1忽略了buf末尾的null，因此 “a write to stdout\n” 留在了缓冲区中。</p><p>buf直接写入标准输出，不受缓冲区影响。</p><p>printf(“before fork\n”)在输出到文件时未flush缓冲区，在fork的过程中复制了缓冲区，因此输出了两次。</p><h4 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h4><p>父进程和子进程每个相同的打开描述符</p><ul><li>共享一个文件表项</li><li>共享同一个文件偏移量</li></ul><p>fork的两个常见用法：</p><ul><li>父进程与子进程执行不同的代码段</li><li>一个进程要执行一个不同的程序（fork后立即调用exec）</li></ul><h2 id="8-4-函数vfork"><a href="#8-4-函数vfork" class="headerlink" title="8.4 函数vfork"></a>8.4 函数vfork</h2><p>vfork用于创造并执行一个新程序。</p><h4 id="8-4-c"><a href="#8-4-c" class="headerlink" title="8.4.c"></a>8.4.c</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gcc <span class="number">8.4</span>.c</span><br><span class="line">$ ./a.out</span><br><span class="line">before vfork</span><br><span class="line">pid = <span class="number">22413</span>, glob = <span class="number">7</span>, car = <span class="number">89</span></span><br></pre></td></tr></table></figure><p>vfork与fork的区别在于：</p><ul><li>vfork 会保证子进程在父进程之前运行，直到子进程触发了 exec 或者 exit 。</li><li>vfork 不会将父进程的地址空间完全复制过来，在子进程调用 exec 或者 exit 之前，它在父进程的空间中运行。</li></ul><h2 id="8-5-函数exit"><a href="#8-5-函数exit" class="headerlink" title="8.5 函数exit"></a>8.5 函数exit</h2><p>如7.3所述，进程有5种正常及3种异常终止方式。</p><p>我们希望终止进程能够通知父进程它是如何终止的，实现这一点的方式是将其退出状态作为参数传递给函数。</p><p>若父进程在子进程之前终止，则子进程会被init进程收养。</p><h2 id="8-6-函数wait和waitpid"><a href="#8-6-函数wait和waitpid" class="headerlink" title="8.6 函数wait和waitpid"></a>8.6 函数wait和waitpid</h2><p>当一个进程正常或异常终止时，内核就向其父进程发送SIGCHLD信号。</p><p>当一个进程调用wait或waitpid可能发生：</p><ul><li>如果所有子进程都还在运行，则阻塞</li><li>如果一个子进程已经终止，等待父进程获取其终止状态，则取得状态返回。</li><li>如果没有任何子进程则立即出差返回</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude<span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">wait</span><span class="params">(<span class="type">int</span> *statloc)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">waitpid</span><span class="params">(<span class="type">pid_t</span> pid,<span class="type">int</span> *statloc,<span class="type">int</span> options)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">//两个函数返回值：若成功，则返回进程ID；若出错，则返回0或-1</span></span></span><br></pre></td></tr></table></figure><p>若statloc不为空，则终止状态便存放在该单元中，可以使用&lt;sys&#x2F;wait.h&gt;中的宏来查看。</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660272991111-28e0a4d0-70b8-47be-9b6d-16398b01776f.png" alt="img"></p><h4 id="8-6-c"><a href="#8-6-c" class="headerlink" title="8.6.c"></a>8.6.c</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gcc <span class="number">8.6</span>.c</span><br><span class="line">$ ./a.out</span><br><span class="line">normal termination, exit status = <span class="number">7</span></span><br><span class="line">abnormal termination, signal number = <span class="number">6</span>  (core file generated)</span><br><span class="line">abnormal termination, signal number = <span class="number">8</span>  (core file generated)</span><br></pre></td></tr></table></figure><h4 id="对于waitpid中pid参数的解释"><a href="#对于waitpid中pid参数的解释" class="headerlink" title="对于waitpid中pid参数的解释"></a>对于waitpid中pid参数的解释</h4><ul><li>pid&#x3D;&#x3D;1 等待任一子进程</li><li>pid&gt;0 等待进程ID与pid相等的子进程</li><li>pid&#x3D;&#x3D;0 等待进程组ID等于调用进程组pid的任一子进程</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;8-2-进程标识&quot;&gt;&lt;a href=&quot;#8-2-进程标识&quot; class=&quot;headerlink&quot; title=&quot;8.2 进程标识&quot;&gt;&lt;/a&gt;8.2 进程标识&lt;/h2&gt;&lt;p&gt;每个进程都有一个非负整型表示唯一的进程ID。&lt;/p&gt;
&lt;figure class=&quot;high</summary>
      
    
    
    
    <category term="Linux学习" scheme="http://wujundehuda.github.io/categories/Linux%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装docker并用Portainer管理</title>
    <link href="http://wujundehuda.github.io/2022/08/11/Ubuntu%E5%AE%89%E8%A3%85docker%E5%B9%B6%E7%94%A8Portainer%E7%AE%A1%E7%90%86/"/>
    <id>http://wujundehuda.github.io/2022/08/11/Ubuntu%E5%AE%89%E8%A3%85docker%E5%B9%B6%E7%94%A8Portainer%E7%AE%A1%E7%90%86/</id>
    <published>2022-08-11T08:07:00.000Z</published>
    <updated>2022-08-11T11:26:37.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h2><p>更新apt包索引</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装 apt 依赖包，用于通过HTTPS来获取仓库</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><p>添加 Docker 的官方 GPG 密钥</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:<span class="comment">//mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span></span><br></pre></td></tr></table></figure><p>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key fingerprint <span class="number">0</span>EBFCD88</span><br><span class="line">   </span><br><span class="line">pub   rsa4096 <span class="number">2017</span><span class="number">-02</span><span class="number">-22</span> [SCEA]</span><br><span class="line">      <span class="number">9</span>DC8 <span class="number">5822</span> <span class="number">9F</span>C7 DD38 <span class="number">854</span>A  E2D8 <span class="number">8</span>D81 <span class="number">803</span>C <span class="number">0</span>EBF CD88</span><br><span class="line">uid           [ unknown] <span class="function">Docker <span class="title">Release</span> <span class="params">(CE deb)</span> &lt;docker@docker.com&gt;</span></span><br><span class="line"><span class="function">sub   rsa4096 2017-02-22 [S]</span></span><br></pre></td></tr></table></figure><p>使用以下指令设置稳定版仓库</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/ \</span></span><br><span class="line"><span class="string">  $(lsb_release -cs) \</span></span><br><span class="line"><span class="string">  stable&quot;</span></span><br></pre></td></tr></table></figure><p>安装最新版本的 Docker Engine-Community 和 containerd</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>测试 Docker 是否安装成功，输入以下指令，打印出以下信息则安装成功</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line"><span class="number">1b</span>930d010525: Pull complete                                                                                                                                  Digest: sha256:c3b4ada4687bbaa170745b3e4dd8ac3f194ca95b2d0518b417fb47e5879d9b5f</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To generate <span class="keyword">this</span> message, Docker took the following steps:</span><br><span class="line"> <span class="number">1.</span> The Docker client contacted the Docker daemon.</span><br><span class="line"> <span class="number">2.</span> The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> <span class="number">3.</span> The Docker daemon created a <span class="keyword">new</span> container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> <span class="number">4.</span> The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To <span class="keyword">try</span> something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, <span class="keyword">and</span> more with a free Docker ID:</span><br><span class="line"> https:<span class="comment">//hub.docker.com/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">For more examples <span class="keyword">and</span> ideas, visit:</span><br><span class="line"> https:<span class="comment">//docs.docker.com/get-started/</span></span><br></pre></td></tr></table></figure><h2 id="二、安装Portainer"><a href="#二、安装Portainer" class="headerlink" title="二、安装Portainer"></a>二、安装Portainer</h2><p>创建 Portainer Server 存储数据库的卷</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker volume create portainer_data</span><br></pre></td></tr></table></figure><p>下载并安装 Portainer Server 容器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -p <span class="number">8000</span>:<span class="number">8000</span> -p <span class="number">9443</span>:<span class="number">9443</span> --name portainer \</span><br><span class="line">    --restart=always \ </span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v portainer_data:/data </span><br><span class="line">    \portainer/portainer-ce:latest</span><br></pre></td></tr></table></figure><p>查看 Docker 容器状态（NAMES 标签出现 portainer&#x2F;portainer-ce 则成功运行）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps</span><br></pre></td></tr></table></figure><p><strong>使用 Ubuntu 自带的火狐浏览器访问（</strong><a href="https://127.0.0.1:9443/**%EF%BC%89****%E6%88%96%E4%BD%BF%E7%94%A8%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E5%8F%A6%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%89%8B%E6%9C%BA%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%EF%BC%88https://%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84IP:9443/%EF%BC%89">https://127.0.0.1:9443/**）****或使用局域网内另一台计算机/手机的浏览器访问（https://服务器的IP:9443/）</a>**</p><p><strong>对 Portainer 初始设置</strong>设置用户名及密码（8位字符或数字），点击 Get Started，载入后点击 local 即可</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660205149604-7fd72f5c-890f-42e8-af7d-fb69782fed86.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、安装docker&quot;&gt;&lt;a href=&quot;#一、安装docker&quot; class=&quot;headerlink&quot; title=&quot;一、安装docker&quot;&gt;&lt;/a&gt;一、安装docker&lt;/h2&gt;&lt;p&gt;更新apt包索引&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="Linux工具" scheme="http://wujundehuda.github.io/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="http://wujundehuda.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker的FRP内网穿透部署</title>
    <link href="http://wujundehuda.github.io/2022/08/11/%E5%9F%BA%E4%BA%8EDocker%E7%9A%84FRP%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E9%83%A8%E7%BD%B2/"/>
    <id>http://wujundehuda.github.io/2022/08/11/%E5%9F%BA%E4%BA%8EDocker%E7%9A%84FRP%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E9%83%A8%E7%BD%B2/</id>
    <published>2022-08-11T07:24:37.000Z</published>
    <updated>2022-08-11T13:14:15.866Z</updated>
    
    <content type="html"><![CDATA[<p>云服务器与本地服务器均为Ubuntu系统</p><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在新配置好的服务器上查看ip地址为192.168.1.14，直接使用ssh命令连接<code>ssh wjd@192.168.1.14</code>输入密码后成功连接。</p><p>但192.168.1.14为内网ip，内网也称为局域网，当我的笔记本电脑连接的不是家中的网络时，便不能使用该命令来访问服务器，于是乎我决定使用闲置的云服务器基于docker使用frp实现内网穿透。</p><h2 id="二、内网、公网与NAT"><a href="#二、内网、公网与NAT" class="headerlink" title="二、内网、公网与NAT"></a>二、内网、公网与NAT</h2><p>先简单介绍一下几个基本概念。</p><ul><li>公网ip：广域网IP是指以公网连接Internet上的非保留地址。</li><li>内网ip与NAT：鉴于ipv4数量，运营商将一个区域内的设备连在一起，对外只用一个公网ip标识自己。</li><li>NAT：私有IP+端口 &lt;——&gt; 公网IP+端口</li></ul><h3 id="内网穿透原理："><a href="#内网穿透原理：" class="headerlink" title="内网穿透原理："></a>内网穿透原理：</h3><p>首先我们需要一台拥有公网ip的机器（本文使用腾讯云服务器）</p><p>在云服务器上部署frp服务端，在本地服务器上部署frp客户端。</p><p>通过frp转发，以云服务器为中继实现内网穿透。</p><h2 id="三、搭建frp服务"><a href="#三、搭建frp服务" class="headerlink" title="三、搭建frp服务"></a>三、搭建frp服务</h2><h3 id="3-1-在云服务器与本地服务器安装docker"><a href="#3-1-在云服务器与本地服务器安装docker" class="headerlink" title="3.1 在云服务器与本地服务器安装docker"></a>3.1 在云服务器与本地服务器安装docker</h3><p>docker安装服务方便快捷便于管理。</p><h3 id="3-2-搭建服务端frps"><a href="#3-2-搭建服务端frps" class="headerlink" title="3.2 搭建服务端frps"></a>3.2 搭建服务端frps</h3><h4 id="3-2-1-编辑配置文件"><a href="#3-2-1-编辑配置文件" class="headerlink" title="3.2.1 编辑配置文件"></a>3.2.1 编辑配置文件</h4><p>由于要使用端口及配置文件映射，我们提前配置好服务端配置文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/frp</span><br><span class="line">touch /etc/frp/frps.ini</span><br><span class="line">vi /etc/frp/frps.ini</span><br></pre></td></tr></table></figure><p>配置文件如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"># 监听端口</span><br><span class="line">bind_port = <span class="number">7000</span></span><br><span class="line"># 面板端口</span><br><span class="line">dashboard_port = <span class="number">7500</span></span><br><span class="line"># 登录面板账号设置</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin@<span class="number">123</span></span><br><span class="line"></span><br><span class="line"># 身份验证</span><br><span class="line">token = <span class="number">12345678</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-使用以下命令运行frps"><a href="#3-2-2-使用以下命令运行frps" class="headerlink" title="3.2.2 使用以下命令运行frps"></a>3.2.2 使用以下命令运行frps</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --network host -d -v /opt/docker/frps/frps.ini:/etc/frp/frps.ini --name frps snowdreamtech/frps</span><br></pre></td></tr></table></figure><p>–network host: host 网络模式，所有容器端口都对应属主机端口，不存在映射关系。</p><h4 id="3-2-3-前往服务器控制台放行对应端口"><a href="#3-2-3-前往服务器控制台放行对应端口" class="headerlink" title="3.2.3 前往服务器控制台放行对应端口"></a>3.2.3 前往服务器控制台放行对应端口</h4><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660209285979-e9f2011b-7aac-4384-a2e1-488964aa1633.png" alt="img"></p><h4 id="3-2-4-访问web界面"><a href="#3-2-4-访问web界面" class="headerlink" title="3.2.4 访问web界面"></a>3.2.4 访问web界面</h4><p>使用<a href="http://ip:7500，其中ip为你的服务器ip，使用网页打开。">http://ip:7500，其中ip为你的服务器ip，使用网页打开。</a></p><p>使用配置文件预设的账号密码登陆。</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660209529676-8b54bca3-ecaf-4eb3-95e3-7160b985d97c.png" alt="img"></p><p>可以看到服务端配置成功等待连接。</p><h3 id="3-3-搭建客户端frpc"><a href="#3-3-搭建客户端frpc" class="headerlink" title="3.3 搭建客户端frpc"></a>3.3 搭建客户端frpc</h3><p>按照同样的方式配置客户端</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/frp</span><br><span class="line">touch /etc/frp/frpc.ini</span><br><span class="line">vi /etc/frp/frpc.ini</span><br></pre></td></tr></table></figure><p>配置文件如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"># server_addr为FRPS服务器IP地址</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line"># server_port为服务端监听端口，bind_port</span><br><span class="line">server_port = <span class="number">7000</span></span><br><span class="line"># 身份验证</span><br><span class="line">token = <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># [ssh] 为服务名称，下方此处设置为，访问frp服务段的<span class="number">2288</span>端口时，等同于通过中转服务器访问<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>的<span class="number">22</span>端口。</span><br><span class="line"><span class="meta"># type 为连接的类型，此处为tcp</span></span><br><span class="line"># local_ip 为中转客户端实际访问的IP </span><br><span class="line"># local_port 为目标端口</span><br><span class="line"># remote_port 为远程端口</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">local_port = <span class="number">22</span></span><br><span class="line">remote_port = <span class="number">2222</span></span><br></pre></td></tr></table></figure><p>运行frpc</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --network host -d -v /opt/docker/frpc/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc</span><br></pre></td></tr></table></figure><h2 id="四、使用frp服务"><a href="#四、使用frp服务" class="headerlink" title="四、使用frp服务"></a>四、使用frp服务</h2><p>在这里笔者踩了很久的坑，使用ssh连接时输入的用户名应为远程主机的用户名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh 本地服务器的用户名@你的云服务器ip -p <span class="number">2222</span></span><br><span class="line"># <span class="number">2222</span>为设置的远程端口</span><br></pre></td></tr></table></figure><p>输入密码后连接成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;云服务器与本地服务器均为Ubuntu系统&lt;/p&gt;
&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;在新配置好的服务器上查看ip地址为192.168.1.14，直接使用</summary>
      
    
    
    
    <category term="折腾一台小服务器" scheme="http://wujundehuda.github.io/categories/%E6%8A%98%E8%85%BE%E4%B8%80%E5%8F%B0%E5%B0%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="http://wujundehuda.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Unix环境高级编程第三章-文件I/O</title>
    <link href="http://wujundehuda.github.io/2022/08/11/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%96%87%E4%BB%B6I-O/"/>
    <id>http://wujundehuda.github.io/2022/08/11/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%96%87%E4%BB%B6I-O/</id>
    <published>2022-08-11T03:11:04.000Z</published>
    <updated>2022-08-12T01:11:53.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-2-文件描述符"><a href="#3-2-文件描述符" class="headerlink" title="3.2 文件描述符"></a>3.2 文件描述符</h2><ul><li>STDIN_FILENO（0）与进程的标准输入关联</li><li>STDOUT_FILENO（1）与进程的标准输出关联</li><li>STDERR_FILENO（2）与进程的标准错误关联</li></ul><p>在头文件&lt;unistd.h&gt;中定义</p><h2 id="3-3-函数open和openat"><a href="#3-3-函数open和openat" class="headerlink" title="3.3 函数open和openat"></a>3.3 函数open和openat</h2><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660183226415-f960ff26-4c40-450d-8188-656da8818304.png"></p><h3 id="path参数：要打开或创造文件的名字"><a href="#path参数：要打开或创造文件的名字" class="headerlink" title="path参数：要打开或创造文件的名字"></a>path参数：要打开或创造文件的名字</h3><h3 id="oflag参数：说明函数的多个选项"><a href="#oflag参数：说明函数的多个选项" class="headerlink" title="oflag参数：说明函数的多个选项"></a>oflag参数：说明函数的多个选项</h3><ul><li>O_RDONLY只读打开</li><li>O_WRONLY只写打开</li><li>O_DRWR读、写打开</li><li>O_EXEC 只执行打开</li><li>O_SEARCH只搜索打开</li></ul><p>以上参数必须且只能指定一个</p><p><strong>由open和openat函数返回的文件描述符一定是最小未用描述符数值</strong></p><h3 id="open与openat的区别"><a href="#open与openat的区别" class="headerlink" title="open与openat的区别"></a>open与openat的区别</h3><p>fd参数指出了相对路径名在文件系统中的开始地址</p><ul><li>openat使线程可以使用相对路径名打开目录中的文件</li><li>避免TOCTTOU错误</li></ul><p>如果有两个基于文件的函数调用，第二个调用依赖第一个调用的结果，因为两个操作不是原子操作，程序是脆弱的。</p><h2 id="3-4-函数creat"><a href="#3-4-函数creat" class="headerlink" title="3.4 函数creat"></a>3.4 函数creat</h2><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/image-20220812091145365.png" alt="image-20220812091145365"></p><h2 id="3-5-函数close"><a href="#3-5-函数close" class="headerlink" title="3.5 函数close"></a>3.5 函数close</h2><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660184130351-91dbfa1c-4aff-4e83-a6e3-5a521233269a.png"></p><h2 id="3-6-函数lseek"><a href="#3-6-函数lseek" class="headerlink" title="3.6 函数lseek"></a>3.6 函数lseek</h2><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660184171796-7f1c43bc-6e7e-4411-bd90-a42409f57c9b.png"></p><ul><li>0绝对偏移量</li><li>1相对偏移量</li><li>2相对于尾部偏移量</li></ul><p>也可用于确定某文件是否可以设置偏移量，如管道、FIFO或网络套接字。</p><p>若不能设置偏移量则返回-1。</p><h3 id="使用lseek创造一个具有空洞的程序"><a href="#使用lseek创造一个具有空洞的程序" class="headerlink" title="使用lseek创造一个具有空洞的程序"></a>使用lseek创造一个具有空洞的程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;apue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>buf1[] = <span class="string">&quot;abcdefghij&quot;</span>;</span><br><span class="line"><span class="type">char</span>buf2[] = <span class="string">&quot;ABCDEFGHIJ&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>fd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((fd = <span class="built_in">creat</span>(<span class="string">&quot;file.hole&quot;</span>, FILE_MODE)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">err_sys</span>(<span class="string">&quot;creat error&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">write</span>(fd, buf1, <span class="number">10</span>) != <span class="number">10</span>)</span><br><span class="line"><span class="built_in">err_sys</span>(<span class="string">&quot;buf1 write error&quot;</span>);</span><br><span class="line"><span class="comment">/* offset now = 10 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">lseek</span>(fd, <span class="number">16384</span>, SEEK_SET) == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">err_sys</span>(<span class="string">&quot;lseek error&quot;</span>);</span><br><span class="line"><span class="comment">/* offset now = 16384 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">write</span>(fd, buf2, <span class="number">10</span>) != <span class="number">10</span>)</span><br><span class="line"><span class="built_in">err_sys</span>(<span class="string">&quot;buf2 write error&quot;</span>);</span><br><span class="line"><span class="comment">/* offset now = 16394 */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660184692174-bd3f1d24-d83a-4b74-9d61-2c57d1f4f100.png"></p><h2 id="3-7-函数read"><a href="#3-7-函数read" class="headerlink" title="3.7 函数read"></a>3.7 函数read</h2><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660184850932-cbe6e879-797e-4d9a-a43e-edd4480980ed.png"></p><p>有多种情况使世纪读到的字节数少于要读的字节数：</p><ul><li>读普通文件时，在读到要求字节数之前已到达文件尾部。下次调用read时返回0.</li><li>从终端设备读时。</li><li>从网络设备读时，网络的缓冲机制可能造成。</li><li>从管道或FIFO读时，管道包含字节少于所需的数量，那么read将返回实际可用的字节数。</li></ul><h2 id="3-8-函数write"><a href="#3-8-函数write" class="headerlink" title="3.8 函数write"></a>3.8 函数write</h2><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660185086011-14e1d5c6-24d6-4fc9-947b-431e91c1214e.png"></p><p>返回值常常与nbytes的值相同。</p><h2 id="3-9-I-x2F-O效率"><a href="#3-9-I-x2F-O效率" class="headerlink" title="3.9 I&#x2F;O效率"></a>3.9 I&#x2F;O效率</h2><p>本节主要讨论缓冲区大小对I&#x2F;O效率的影响</p><p>大多数文件系统采用预读技术，使用较大缓冲区可以提高读写效率，但缓冲区足够大时效率几乎相同。</p><h2 id="3-10-文件共享"><a href="#3-10-文件共享" class="headerlink" title="3.10 文件共享"></a>3.10 文件共享</h2><h3 id="内核用于所有I-x2F-O的数据结构"><a href="#内核用于所有I-x2F-O的数据结构" class="headerlink" title="内核用于所有I&#x2F;O的数据结构"></a>内核用于所有I&#x2F;O的数据结构</h3><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660185557445-39386832-7426-4236-9890-c697df81d0d9.png"></p><p>每个进程都有自己独立的文件表项，这可以使每个进程都有自己对该文件的当前偏移量。</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660185954611-649b880e-fadb-4fb1-8517-7ab30c0cf24a-20220811112025890.png"></p><h2 id="3-11-原子操作"><a href="#3-11-原子操作" class="headerlink" title="3.11 原子操作"></a>3.11 原子操作</h2><h2 id="3-12-函数dup和dup2"><a href="#3-12-函数dup和dup2" class="headerlink" title="3.12 函数dup和dup2"></a>3.12 函数dup和dup2</h2><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660186276279-0788fa8d-b717-47b8-b92a-0bafccb54b80-20220811112145124.png"></p><p>由dup返回的新文件描述符一定是当前可用的最小数值。</p><p>对于dup2，若fd2已打开，先关闭fd2；若fd2等于fd，则直接返回fd2.</p><p><img src="https://raw.githubusercontent.com/WuJunDehuda/PicGo/main/1660186375474-712798d2-75cc-4732-8d6a-44ff67ba3ea9-20220811112230092.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;3-2-文件描述符&quot;&gt;&lt;a href=&quot;#3-2-文件描述符&quot; class=&quot;headerlink&quot; title=&quot;3.2 文件描述符&quot;&gt;&lt;/a&gt;3.2 文件描述符&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;STDIN_FILENO（0）与进程的标准输入关联&lt;/li&gt;
&lt;li&gt;S</summary>
      
    
    
    
    <category term="Linux学习" scheme="http://wujundehuda.github.io/categories/Linux%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Unix环境高级编程开篇-apue.h配置</title>
    <link href="http://wujundehuda.github.io/2022/08/11/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%BC%80%E7%AF%87-apue-h%E9%85%8D%E7%BD%AE/"/>
    <id>http://wujundehuda.github.io/2022/08/11/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%BC%80%E7%AF%87-apue-h%E9%85%8D%E7%BD%AE/</id>
    <published>2022-08-11T01:38:43.000Z</published>
    <updated>2022-08-11T13:15:47.126Z</updated>
    
    <content type="html"><![CDATA[<p>书中大部分代码都#include “apue”头文件，本文件记录了配置apue头文件的过程。</p><h2 id="一、下载该头文件"><a href="#一、下载该头文件" class="headerlink" title="一、下载该头文件"></a>一、下载该头文件</h2><ul><li>使用命令行下载<code>wget http://www.apuebook.com/src.3e.tar.gz</code></li><li>到官网手动下载 <a href="http://www.apuebook.com/apue3e.html">传送门</a></li></ul><h2 id="二、解压"><a href="#二、解压" class="headerlink" title="二、解压"></a>二、解压</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf src.3e.tar.gz</span><br></pre></td></tr></table></figure><h2 id="三、复制两个文件"><a href="#三、复制两个文件" class="headerlink" title="三、复制两个文件"></a>三、复制两个文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/home/Downloads/apu<span class="number">.3</span>e/include    <span class="comment">/* apue.h */</span></span><br><span class="line">/home/Downloads/apu<span class="number">.3</span>e/lib       <span class="comment">/* error.c */</span></span><br><span class="line">##将两个文件拷贝到默认的c语言库中</span><br><span class="line">cp ./include/apue.h ./lib/error.c /usr/include</span><br></pre></td></tr></table></figure><h2 id="四、修改文件内容"><a href="#四、修改文件内容" class="headerlink" title="四、修改文件内容"></a>四、修改文件内容</h2><h4 id="在apue-h-头文件的最后一行前添加一行代码："><a href="#在apue-h-头文件的最后一行前添加一行代码：" class="headerlink" title="在apue.h 头文件的最后一行前添加一行代码："></a>在apue.h 头文件的最后一行前添加一行代码：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;erro.c&quot;</span><br></pre></td></tr></table></figure><p>最后效果如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;error.c&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">/* _APUE_H */</span></span></span><br></pre></td></tr></table></figure><h2 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h2><p>最后便可使用apue头文件，不需要再次编译apue.3e</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;书中大部分代码都#include “apue”头文件，本文件记录了配置apue头文件的过程。&lt;/p&gt;
&lt;h2 id=&quot;一、下载该头文件&quot;&gt;&lt;a href=&quot;#一、下载该头文件&quot; class=&quot;headerlink&quot; title=&quot;一、下载该头文件&quot;&gt;&lt;/a&gt;一、下载该头文件</summary>
      
    
    
    
    <category term="Linux学习" scheme="http://wujundehuda.github.io/categories/Linux%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux终端命令行神器screen</title>
    <link href="http://wujundehuda.github.io/2022/08/06/Linux%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A5%9E%E5%99%A8screen/"/>
    <id>http://wujundehuda.github.io/2022/08/06/Linux%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A5%9E%E5%99%A8screen/</id>
    <published>2022-08-06T01:24:06.000Z</published>
    <updated>2022-08-11T09:51:50.883Z</updated>
    
    <content type="html"><![CDATA[<p>screen的功能<br>screen的功能大体有三个：<br>● 会话恢复：只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。<br>● 多窗口：在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。<br>● 会话共享：Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。<br>这三个功能，其实互相交织，组成screen功能繁多的命令集。<br><code>sudo apt install screen</code><br>screen命令集<br>screen，通常的命令格式为：<br><code>screen [-opts] [cmd [args]]</code><br>通常情况下，使用一下基础命令即可，高阶命令过多，比较难记。<br>注意：<br>● 命令区分大小写<br>状态介绍<br>通常情况下，screen创建的虚拟终端，有两个工作模式：<br>● Attached：表示当前screen正在作为主终端使用，为活跃状态。<br>● Detached：表示当前screen正在后台使用，为非激发状态。<br>通常情况下，不需要关注上面的状态。<br>基础命令<br>这里列举一些我认为常用的screen命令，使用以下命令基本满足日常使用。<br>● 查询screen提示：<br><code>screen -help</code><br>● 终端列表<br><code>screen -ls</code><br>● 新建终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#新建一个叫test的虚拟终端</span><br><span class="line">#注意S为大写</span><br><span class="line"></span><br><span class="line">screen -S test</span><br><span class="line">screen -R test</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;screen的功能&lt;br&gt;screen的功能大体有三个：&lt;br&gt;● 会话恢复：只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen </summary>
      
    
    
    
    <category term="Linux工具" scheme="http://wujundehuda.github.io/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux" scheme="http://wujundehuda.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wujundehuda.github.io/2022/07/24/hello-world/"/>
    <id>http://wujundehuda.github.io/2022/07/24/hello-world/</id>
    <published>2022-07-24T08:51:31.153Z</published>
    <updated>2022-07-24T08:51:31.154Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
